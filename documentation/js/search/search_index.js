var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.659,1,2.31]],["body/modules/AppModule.html",[0,2.142,1,4.47,2,1.649,3,2.307,4,2.686,5,2.686,6,2.686,7,3.402,8,0.025,9,3.402,10,3.145,11,3.402,12,2.717,13,1.942,14,1.942,15,0.208,16,0.181,17,0.181,18,2.368,19,2.982,20,2.142,21,3.44,22,3.314,23,0.699,24,3.168,25,4.434,26,5.54,27,0.422,28,3.168,29,0.747,30,0.747,31,0.324,32,0.654,33,3.168,34,0.654,35,0.528,36,1.436,37,4.434,38,0.493,39,3.168,40,2.686,41,3.168,42,2.686,43,2.131,44,3.168,45,3.168,46,2.368,47,3.168,48,1.331,49,3.314,50,3.168,51,0.208,52,0.011,53,1.531,54,3.168,55,0.015,56,0.015]],["title/controllers/AuthController.html",[57,1.545,58,2.31]],["body/controllers/AuthController.html",[8,0.025,15,0.196,16,0.171,17,0.171,20,1.445,23,0.94,27,0.567,29,1.003,30,1.003,31,0.436,32,0.879,34,0.879,35,0.537,38,0.663,51,0.196,52,0.01,55,0.015,56,0.015,57,1.345,58,2.863,59,2.535,60,2.011,61,2.535,62,0.196,63,3.037,64,2.865,65,2.191,66,3.634,67,2.535,68,1.742,69,1.673,70,2.99,71,2.99,72,2.122,73,2.535,74,4.256,75,4.256,76,2.99,77,1.915,78,2.535,79,3.182,80,2.394,81,2.011,82,2.99,83,2.235,84,2.235,85,1.556,86,2.011,87,1.101,88,2.535,89,2.863,90,2.99,91,2.011,92,1.832,93,2.535,94,2.99,95,2.99,96,1.175,97,1.175,98,2.99,99,2.99,100,1.07,101,2.056,102,2.99,103,2.99,104,2.99]],["title/modules/AuthModule.html",[0,1.659,7,1.934]],["body/modules/AuthModule.html",[0,2.006,2,1.503,3,2.16,7,3.808,8,0.025,10,3.05,12,2.544,13,1.77,14,1.77,15,0.19,16,0.165,17,0.165,19,2.792,20,2.006,22,3.103,35,0.54,38,0.45,42,2.448,51,0.19,52,0.01,55,0.014,56,0.014,58,3.269,80,3.157,81,1.942,85,1.503,105,2.448,106,2.448,107,2.888,108,2.448,109,3.3,110,3.592,111,3.592,112,2.638,113,2.888,114,3.103,115,2.888,116,2.159,117,2.888,118,4.152,119,2.448,120,2.448,121,2.888,122,2.888,123,3.103,124,2.888,125,2.888,126,2.159,127,2.888,128,2.888,129,3.52,130,2.888,131,2.888,132,2.888,133,2.888,134,2.888]],["title/injectables/AuthService.html",[80,1.659,135,0.458]],["body/injectables/AuthService.html",[8,0.025,15,0.123,16,0.107,17,0.107,23,0.659,27,0.66,29,1.167,30,1.167,31,0.507,32,1.023,34,0.96,35,0.464,36,0.606,38,0.291,48,1.952,51,0.123,52,0.006,55,0.01,56,0.01,61,1.587,62,0.123,63,3.409,64,2.864,65,1.468,66,3.035,67,2.532,68,1.692,72,2.121,73,2.532,77,2.091,80,1.443,88,1.587,91,1.259,92,3.035,93,1.587,97,1.464,100,1.398,101,1.8,109,2.926,112,2.228,116,1.399,119,1.587,120,1.587,135,0.398,136,0.646,137,1.587,138,3.331,139,2.986,140,2.986,141,2.986,142,1.344,143,1.872,144,5.197,145,1.872,146,2.986,147,1.872,148,3.185,149,1.093,150,2.392,151,1.872,152,2.986,153,1.872,154,1.872,155,2.986,156,1.872,157,1.587,158,2.008,159,1.681,160,1.344,161,1.872,162,1.587,163,1.587,164,1.399,165,2.986,166,1.872,167,1.872,168,1.872,169,1.872,170,1.147,171,1.872,172,1.344,173,1.872,174,1.872,175,1.872,176,1.872,177,1.872,178,1.872,179,1.872,180,1.259,181,1.872,182,0.842,183,1.872,184,1.872,185,2.986,186,1.872,187,1.872,188,1.872,189,1.587,190,1.399,191,1.399,192,1.587,193,1.259,194,1.587,195,1.872,196,1.587,197,1.872,198,1.872,199,1.872,200,1.872,201,2.986,202,1.872,203,1.872]],["title/injectables/CryptoService.html",[109,1.934,135,0.458]],["body/injectables/CryptoService.html",[8,0.024,15,0.195,16,0.17,17,0.17,23,0.936,27,0.658,29,1.164,30,1.164,31,0.551,32,1.02,34,1.02,35,0.354,38,0.463,48,2.075,51,0.195,52,0.01,55,0.015,56,0.015,62,0.195,63,3.627,100,1.242,109,2.386,135,0.565,136,1.026,138,3.323,149,1.527,150,2.048,180,4.419,204,2.52,205,4.94,206,3.693,207,4.239,208,4.239,209,2.973,210,4.94,211,2.973,212,4.94,213,2.851,214,4.239,215,2.973,216,4.239,217,2.973,218,2.973,219,2.973,220,2.973,221,2.973,222,5.693,223,2.973,224,2.973,225,2.973,226,2.973,227,2.973,228,2.973,229,2.973]],["title/classes/CustomExceptionFilter.html",[52,0.012,230,2.31]],["body/classes/CustomExceptionFilter.html",[8,0.024,15,0.254,16,0.221,17,0.221,23,1.121,27,0.516,29,0.913,30,0.913,31,0.396,32,0.8,34,0.8,35,0.323,36,1.254,38,0.603,48,2.382,51,0.254,52,0.013,53,2.454,55,0.018,56,0.018,62,0.254,230,3.417,231,1.627,232,4.307,233,3.283,234,5.67,235,4.238,236,5.08,237,4.499,238,5.67,239,6.019,240,3.873,241,3.873,242,3.873,243,3.873,244,3.873,245,3.873,246,3.873,247,3.873,248,2.605,249,3.873,250,3.283,251,3.873,252,5.08,253,3.873,254,3.873,255,3.873,256,3.873]],["title/injectables/CustomMiddleware.html",[43,2.31,135,0.458]],["body/injectables/CustomMiddleware.html",[8,0.024,15,0.271,16,0.236,17,0.236,23,1.168,27,0.55,29,0.972,30,0.972,31,0.422,32,0.852,34,0.852,35,0.344,36,1.336,38,0.642,43,3.56,51,0.271,52,0.014,53,1.993,55,0.018,56,0.018,62,0.271,135,0.705,136,1.424,248,3.931,250,4.955,257,3.498,258,4.487,259,5.293,260,5.845,261,5.227,262,3.957,263,4.126,264,4.126,265,3.498,266,5.293,267,4.126]],["title/classes/Email.html",[52,0.012,172,1.545]],["body/classes/Email.html",[8,0.024,15,0.307,16,0.267,17,0.267,27,0.623,31,0.479,35,0.39,51,0.307,52,0.016,55,0.02,56,0.02,62,0.307,69,1.839,87,1.723,149,1.265,172,2.978,231,1.966,268,3.967,269,2.251,270,3.222,271,4.68]],["title/injectables/EveryMinuteService.html",[135,0.458,272,2.105]],["body/injectables/EveryMinuteService.html",[8,0.024,15,0.286,16,0.249,17,0.249,23,1.21,27,0.58,34,0.9,35,0.457,36,1.411,38,0.678,46,3.257,51,0.286,52,0.015,55,0.019,56,0.019,62,0.286,69,1.712,135,0.73,136,1.504,160,1.96,262,4.096,272,3.358,273,3.694,274,6.29,275,5.48,276,4.357,277,4.357,278,4.357,279,4.357,280,4.357,281,3.694,282,4.357]],["title/controllers/HealthController.html",[21,2.31,57,1.545]],["body/controllers/HealthController.html",[8,0.025,11,3.21,15,0.257,16,0.224,17,0.224,20,1.893,21,3.443,23,1.13,27,0.522,34,0.809,35,0.523,38,0.61,40,3.321,51,0.257,52,0.013,55,0.018,56,0.018,57,1.763,60,2.635,62,0.257,69,1.54,86,2.635,87,1.442,96,1.54,97,1.54,100,0.985,149,1.13,283,3.321,284,3.321,285,6.046,286,4.34,287,3.918,288,3.918,289,3.918,290,3.321,291,3.321,292,3.137,293,3.321,294,2.401,295,3.321,296,3.918,297,3.918,298,3.918,299,3.321,300,3.918,301,3.918]],["title/injectables/HealthService.html",[11,1.934,135,0.458]],["body/injectables/HealthService.html",[8,0.024,11,3.036,15,0.279,16,0.243,17,0.243,23,1.19,27,0.566,34,0.877,35,0.45,38,0.661,51,0.279,52,0.018,55,0.019,56,0.019,62,0.279,100,1.067,123,4.031,135,0.718,136,1.466,149,1.19,284,3.6,302,3.6,303,6.232,304,4.247,305,2.857,306,4.247,307,4.247,308,4.031,309,4.247,310,4.247,311,3.6,312,4.247,313,4.247,314,3.175,315,4.247]],["title/injectables/JwtStrategy.html",[110,2.105,135,0.458]],["body/injectables/JwtStrategy.html",[8,0.025,15,0.218,16,0.19,17,0.19,23,1.012,27,0.611,29,1.08,30,1.08,31,0.469,32,0.947,34,0.687,35,0.534,36,1.077,38,0.518,48,1.397,51,0.218,52,0.011,55,0.016,56,0.016,62,0.218,64,2.535,68,1.694,72,1.802,80,2.964,81,2.236,85,1.73,91,2.236,96,1.307,97,1.307,100,0.836,101,1.606,110,2.81,123,3.427,126,2.485,129,2.819,135,0.611,136,1.148,142,1.496,148,3.637,157,2.819,159,2.581,170,2.037,191,2.485,316,2.819,317,3.887,318,2.819,319,3.325,320,4.585,321,3.325,322,3.325,323,2.485,324,2.819,325,1.872,326,2.819,327,2.485,328,3.325,329,3.325,330,3.325,331,3.325,332,3.325,333,2.819]],["title/interfaces/ListResponse.html",[334,1.265,335,1.659]],["body/interfaces/ListResponse.html",[8,0.024,15,0.295,16,0.257,17,0.257,31,0.572,51,0.367,55,0.019,56,0.019,62,0.295,269,2.195,334,2.056,335,2.698,336,2.753,337,3.358,338,3.581,339,4.278,340,5.154,341,5.653,342,2.17,343,3.809]],["title/injectables/LocalStrategy.html",[111,2.105,135,0.458]],["body/injectables/LocalStrategy.html",[8,0.025,15,0.217,16,0.189,17,0.189,23,1.008,27,0.608,29,1.076,30,1.076,31,0.467,32,0.943,34,0.682,35,0.511,36,1.07,38,0.514,48,1.388,51,0.217,52,0.011,55,0.016,56,0.016,62,0.217,64,2.526,65,1.805,68,1.61,72,1.794,80,2.958,81,2.222,85,1.719,91,2.222,96,1.298,97,1.298,100,0.83,101,1.596,111,2.797,135,0.608,136,1.14,142,1.486,149,1.351,150,2.86,159,2.57,170,2.024,190,2.469,191,2.469,192,2.8,317,3.869,318,2.8,323,2.469,324,2.8,325,1.86,326,2.8,327,2.469,333,2.8,344,2.8,345,3.303,346,4.564,347,3.303,348,3.303,349,3.303,350,3.303,351,3.303,352,3.303]],["title/injectables/LogPipe.html",[135,0.458,292,2.105]],["body/injectables/LogPipe.html",[8,0.024,15,0.276,16,0.241,17,0.241,23,1.184,27,0.561,29,0.992,30,0.992,31,0.431,32,0.87,34,0.87,35,0.351,36,1.364,38,0.656,51,0.276,52,0.014,53,2.035,55,0.019,56,0.019,62,0.276,100,1.059,135,0.714,136,1.454,160,1.895,170,2.581,237,3.148,292,3.287,353,3.57,354,4.547,355,4.009,356,5.003,357,6.213,358,4.212,359,3.608,360,4.009,361,4.212,362,3.57,363,4.212]],["title/classes/Login.html",[52,0.012,65,1.186]],["body/classes/Login.html",[8,0.024,15,0.28,16,0.244,17,0.244,27,0.72,31,0.553,35,0.451,51,0.28,52,0.018,55,0.019,56,0.019,62,0.28,65,2.224,69,2.125,87,1.57,149,1.378,150,2.868,231,1.792,269,2.125,270,3.089,364,3.616,365,4.583,366,4.265,367,4.265,368,5.032,369,3.188]],["title/controllers/MeController.html",[57,1.545,370,2.31]],["body/controllers/MeController.html",[8,0.025,15,0.209,16,0.182,17,0.182,20,1.54,23,0.983,27,0.593,29,1.049,30,1.049,31,0.456,32,0.92,34,0.92,35,0.518,38,0.693,51,0.209,52,0.011,55,0.016,56,0.016,57,1.435,60,2.145,62,0.209,64,2.925,68,1.862,69,1.75,72,2.183,77,1.435,79,3.329,83,2.383,84,2.383,85,1.659,86,2.145,87,1.174,89,4.073,96,1.253,97,1.253,100,1.119,101,2.151,112,2.004,305,2.145,338,3.128,370,2.995,371,2.703,372,3.145,373,3.188,374,3.188,375,3.188,376,4.351,377,3.188,378,2.383,379,1.954,380,3.775,381,3.188,382,3.188,383,3.188,384,2.703,385,3.188,386,3.188,387,3.188]],["title/interfaces/Paging.html",[334,1.265,342,1.659]],["body/interfaces/Paging.html",[8,0.024,15,0.295,16,0.257,17,0.257,31,0.572,51,0.367,55,0.019,56,0.019,62,0.295,269,2.195,334,2.056,335,2.17,336,2.753,337,3.358,338,2.529,339,3.022,340,3.809,341,5.913,342,2.698,343,5.392]],["title/classes/Payload.html",[52,0.012,148,2.105]],["body/classes/Payload.html",[8,0.024,15,0.22,16,0.192,17,0.192,27,0.793,29,0.791,30,0.791,31,0.61,32,0.694,35,0.28,51,0.22,52,0.011,55,0.016,56,0.016,62,0.22,65,2.176,69,2.233,87,1.236,142,1.511,148,2.829,149,1.538,172,2.836,182,2.836,231,1.411,269,1.814,270,3.39,388,2.847,389,3.099,390,4.616,391,3.358,392,3.358,393,3.358,394,3.358,395,3.358,396,3.358,397,3.358,398,3.358,399,3.358]],["title/injectables/PerformanceInterceptor.html",[135,0.458,294,2.105]],["body/injectables/PerformanceInterceptor.html",[8,0.025,15,0.218,16,0.19,17,0.19,23,1.012,27,0.699,29,1.08,30,1.08,31,0.537,32,0.947,34,0.687,35,0.438,36,1.077,38,0.518,48,1.397,51,0.218,52,0.011,53,1.606,55,0.016,56,0.016,62,0.218,97,2.062,100,0.836,135,0.611,136,1.148,138,3.53,142,1.496,149,1.31,261,4.449,269,1.802,294,2.81,400,2.819,401,5.934,402,4.585,403,4.585,404,4.585,405,4.585,406,4.228,407,5.657,408,3.325,409,2.819,410,4.449,411,4.585,412,2.485,413,4.585,414,3.325,415,4.585,416,4.585,417,2.819,418,3.325,419,4.585,420,3.325,421,4.585,422,3.325,423,3.325]],["title/injectables/QueryObjectPipe.html",[135,0.458,424,2.105]],["body/injectables/QueryObjectPipe.html",[8,0.025,15,0.228,16,0.198,17,0.198,23,1.043,27,0.629,29,1.113,30,1.113,31,0.484,32,0.976,34,0.717,35,0.29,36,1.125,38,0.541,51,0.31,52,0.012,53,1.678,55,0.016,56,0.016,62,0.228,96,1.365,100,1.448,135,0.629,136,1.199,142,1.563,149,1.185,213,2.336,235,2.596,334,1.279,354,4.005,355,3.531,359,3.177,360,3.531,424,2.895,425,4.013,426,2.596,427,3.473,428,3.875,429,3.473,430,4.005,431,3.473,432,2.945,433,2.945,434,2.945,435,2.945,436,2.945,437,4.005,438,2.596,439,4.005,440,2.945,441,2.945]],["title/interfaces/QueryObjectPipeOptions.html",[334,1.265,428,2.31]],["body/interfaces/QueryObjectPipeOptions.html",[8,0.025,15,0.237,16,0.206,17,0.206,31,0.496,32,1.209,35,0.301,36,1.169,38,0.562,51,0.318,52,0.012,53,1.744,55,0.017,56,0.017,62,0.237,96,1.419,100,1.471,135,0.646,149,0.797,213,3.683,235,2.698,269,1.906,334,1.329,336,2.212,355,2.698,359,2.428,360,3.624,424,2.212,425,2.698,426,2.698,428,3.683,430,3.06,432,4.962,433,4.962,434,4.642,435,3.06,436,3.06,437,4.111,438,2.698,439,4.111,440,3.06,441,3.06]],["title/guards/RoleGuard.html",[442,2.567,443,2.31]],["body/guards/RoleGuard.html",[8,0.025,15,0.219,16,0.191,17,0.191,23,1.014,27,0.612,29,1.083,30,1.083,31,0.47,32,0.949,34,0.689,35,0.439,36,1.081,38,0.519,48,2.38,51,0.219,52,0.011,53,1.611,55,0.016,56,0.016,62,0.219,68,1.312,72,1.806,96,1.311,97,1.311,100,1.321,135,0.612,142,1.501,164,2.493,182,2.365,213,3.536,248,2.244,406,4.234,409,3.896,410,4.457,412,2.493,443,3.091,444,3.336,445,2.828,446,5.941,447,3.336,448,6.141,449,3.336,450,3.336,451,3.336,452,2.828,453,3.336,454,4.595,455,3.336,456,3.336,457,3.336,458,2.828,459,4.595,460,3.336]],["title/modules/RoutinesModule.html",[0,1.659,9,1.934]],["body/modules/RoutinesModule.html",[0,2.612,2,2.219,3,2.813,8,0.024,9,3.764,12,3.313,13,2.614,14,2.614,15,0.28,16,0.244,17,0.244,19,3.636,35,0.451,38,0.664,51,0.28,52,0.015,55,0.019,56,0.019,114,4.041,272,4.264,461,3.616,462,3.616,463,3.616,464,4.265,465,4.265]],["title/classes/SignUp.html",[52,0.012,66,2.105]],["body/classes/SignUp.html",[8,0.024,15,0.245,16,0.213,17,0.213,27,0.79,31,0.607,35,0.464,51,0.245,52,0.017,55,0.017,56,0.017,62,0.245,65,2.271,66,3.037,69,2.331,87,1.373,149,1.401,150,2.394,172,2.504,231,1.567,269,1.948,270,2.896,325,2.79,365,4.718,368,4.201,369,2.788,466,3.162,467,5.566,468,3.73,469,3.73,470,3.73,471,4.201,472,3.73,473,3.73,474,4.956]],["title/classes/Token.html",[52,0.012,92,2.105]],["body/classes/Token.html",[8,0.024,15,0.307,16,0.267,17,0.267,27,0.623,31,0.479,35,0.39,51,0.307,52,0.016,55,0.02,56,0.02,62,0.307,69,1.839,87,1.723,92,4.056,149,1.265,231,1.966,269,2.251,270,3.222,475,3.967,476,4.68]],["title/interfaces/User.html",[68,0.98,334,1.265]],["body/interfaces/User.html",[8,0.025,15,0.207,16,0.18,17,0.18,31,0.618,32,1.143,35,0.369,51,0.335,52,0.015,55,0.015,56,0.015,62,0.207,65,2.011,68,1.805,77,1.421,87,1.163,149,1.496,150,2.673,158,3.918,160,1.421,172,2.621,180,3.721,182,2.716,269,1.739,270,2.879,314,2.361,325,2.491,334,1.629,336,1.936,389,1.644,477,2.124,478,4.329,479,1.936,480,1.936,481,1.936,482,1.936,483,3.307,484,2.678,485,2.678,486,2.678,487,2.678,488,2.361,489,2.361,490,2.678,491,2.678,492,2.678,493,2.678,494,2.678,495,2.678]],["title/controllers/UserController.html",[57,1.545,496,2.31]],["body/controllers/UserController.html",[8,0.025,15,0.135,16,0.117,17,0.117,20,0.992,23,0.874,27,0.648,29,1.145,30,1.145,31,0.498,32,1.004,34,1.004,35,0.513,36,0.665,38,0.5,51,0.135,52,0.007,55,0.011,56,0.011,57,1.446,60,1.382,62,0.135,64,3.041,68,1.778,69,1.91,72,2.304,77,0.924,78,3.357,79,2.403,83,1.535,84,1.535,85,1.069,86,1.382,87,0.756,96,0.807,97,0.807,100,1.222,101,2.348,112,1.446,149,1.265,160,0.924,182,0.924,230,2.162,281,2.725,286,1.741,290,1.741,291,1.741,292,1.97,293,1.741,294,1.259,295,1.741,299,2.725,305,1.382,335,0.992,342,2.163,372,1.97,376,1.741,378,1.535,379,1.259,380,2.725,384,1.741,389,2.803,424,1.97,443,1.382,496,2.162,497,1.741,498,2.162,499,3.214,500,2.162,501,4.478,502,1.382,503,2.054,504,2.054,505,2.054,506,2.054,507,1.382,508,2.054,509,2.054,510,2.054,511,2.054,512,2.054,513,2.054,514,2.054,515,2.725,516,1.741,517,3.214,518,2.054,519,1.382,520,2.054,521,2.054,522,1.741,523,2.054,524,2.054,525,2.054,526,2.054,527,1.382,528,2.054,529,2.054,530,2.054,531,2.054,532,2.054,533,2.054,534,2.054,535,2.054,536,2.054,537,2.054,538,2.054,539,3.214,540,3.959,541,2.054,542,2.054,543,2.054,544,2.054,545,2.054,546,2.054,547,2.054,548,2.054,549,2.054,550,2.054,551,2.054,552,2.054,553,2.054,554,2.054,555,2.054,556,2.054,557,2.054,558,2.054]],["title/classes/UserDto.html",[52,0.012,77,1.545]],["body/classes/UserDto.html",[8,0.025,15,0.21,16,0.183,17,0.183,27,0.741,31,0.599,35,0.372,51,0.337,52,0.015,55,0.016,56,0.016,62,0.21,65,1.921,68,1.775,69,2.02,77,2.008,87,1.178,149,1.441,150,1.545,158,3.742,160,1.439,172,2.503,180,2.151,182,2.633,231,1.344,269,1.754,270,3.237,314,2.391,325,1.801,334,1.643,389,2.675,477,2.151,478,3.784,479,1.96,480,1.96,481,1.96,482,1.96,483,3.336,484,2.712,485,2.712,486,2.712,487,2.712,488,2.391,489,2.391,490,2.712,491,2.712,492,2.712,493,2.712,494,2.712,495,2.712,559,3.198,560,3.198,561,3.198,562,3.198]],["title/injectables/UserInMemoryRepository.html",[135,0.458,563,2.105]],["body/injectables/UserInMemoryRepository.html",[8,0.025,15,0.133,16,0.116,17,0.116,23,0.704,27,0.74,29,1.265,30,1.265,31,0.549,32,1.108,34,1.108,35,0.404,36,0.659,38,0.317,48,1.653,51,0.133,52,0.007,55,0.011,56,0.011,62,0.133,64,3.169,65,0.702,68,1.532,72,2.443,96,0.799,97,0.799,100,1.349,101,1.54,135,0.425,136,0.702,142,0.915,149,1.261,193,2.145,194,1.724,305,2.145,325,1.795,327,1.52,335,0.982,338,1.145,339,2.145,342,2.337,372,1.954,379,1.246,389,1.659,438,1.52,471,4.549,479,1.246,480,1.246,481,1.246,482,1.246,498,2.145,500,2.145,502,2.145,507,2.145,519,2.145,527,1.368,563,1.954,564,2.703,565,1.724,566,3.042,567,3.329,568,2.384,569,2.384,570,2.033,571,4.454,572,2.033,573,2.94,574,2.033,575,2.384,576,2.033,577,2.033,578,2.033,579,2.033,580,2.384,581,2.033,582,2.384,583,2.033,584,3.189,585,1.52,586,2.033,587,2.033,588,2.033,589,3.189,590,2.033,591,3.189,592,2.033,593,1.724,594,2.033,595,3.189,596,3.189,597,2.033,598,3.189,599,2.033,600,2.033,601,2.033,602,2.033,603,2.033,604,2.033,605,2.033,606,1.724,607,1.724,608,1.724,609,2.033,610,2.033,611,2.033]],["title/modules/UserModule.html",[0,1.659,10,1.787]],["body/modules/UserModule.html",[0,2.065,2,1.565,3,2.224,8,0.025,10,3.307,12,2.619,13,1.843,14,1.843,15,0.197,16,0.172,17,0.172,19,2.875,20,2.065,22,2.249,35,0.51,38,0.468,51,0.197,52,0.01,55,0.015,56,0.015,68,0.859,112,2.988,114,3.195,258,2.55,334,1.107,370,3.344,378,2.249,479,1.843,480,1.843,481,1.843,482,1.843,489,2.249,496,3.344,563,3.828,566,3.251,585,2.249,612,2.55,613,3.008,614,2.55,615,5.182,616,5.182,617,3.008,618,3.008,619,3.008,620,3.008,621,3.008,622,3.008,623,3.008,624,3.008,625,2.249,626,3.008,627,3.008,628,3.008,629,3.008]],["title/classes/UserRepository.html",[52,0.012,566,1.787]],["body/classes/UserRepository.html",[8,0.024,15,0.187,16,0.163,17,0.163,23,0.907,27,0.801,29,1.375,30,1.375,31,0.597,32,1.205,34,1.242,35,0.343,51,0.187,52,0.01,55,0.014,56,0.014,62,0.187,65,0.983,68,1.376,72,2.605,149,1.385,193,2.764,231,1.196,335,1.375,342,2.705,372,2.518,379,1.745,389,2.138,498,2.764,500,2.764,502,2.764,507,2.764,519,2.764,527,1.915,566,2.138,567,3.947,568,3.072,569,3.072,573,4.361,575,3.072,580,3.072,582,3.072,630,2.414,631,6.884,632,2.847,633,2.847,634,2.847,635,2.847,636,2.847,637,2.847,638,2.847]],["title/injectables/UserService.html",[112,1.545,135,0.458]],["body/injectables/UserService.html",[8,0.025,15,0.124,16,0.172,17,0.108,23,0.664,27,0.743,29,1.276,30,1.276,31,0.554,32,1.118,34,1.153,35,0.357,38,0.294,51,0.124,52,0.006,55,0.01,56,0.01,62,0.124,63,3.974,64,3.133,65,1.039,68,1.745,72,2.402,77,1.687,96,0.742,97,0.742,100,1.361,101,0.913,112,1.354,135,0.401,136,0.652,138,2.521,142,0.85,149,1.312,160,0.85,162,1.601,163,1.601,164,1.412,170,1.158,172,0.85,182,0.85,189,1.601,193,2.023,196,2.55,206,2.802,237,1.412,308,1.412,311,1.601,335,0.913,338,1.694,339,1.271,342,2.255,362,1.601,372,1.844,379,1.158,389,2.429,498,2.023,500,2.023,502,2.521,507,2.521,516,2.55,519,2.023,527,1.271,566,2.225,567,3.489,568,2.249,569,2.249,573,2.802,575,2.249,580,2.249,582,1.412,585,1.412,593,1.601,606,3.178,607,1.601,608,1.601,625,2.249,639,1.601,640,3.008,641,1.889,642,1.889,643,1.889,644,1.889,645,1.889,646,1.889,647,1.889,648,1.889,649,3.008,650,1.889,651,1.889,652,4.275,653,3.008,654,1.889,655,3.749,656,1.889,657,1.889,658,1.889,659,1.889,660,1.889,661,1.601,662,1.889,663,1.889,664,1.889]],["title/classes/Utils.html",[52,0.012,159,1.934]],["body/classes/Utils.html",[8,0.024,15,0.303,16,0.264,17,0.264,27,0.615,35,0.385,38,0.719,51,0.303,52,0.016,55,0.02,56,0.02,62,0.303,63,2.828,100,1.16,150,2.23,159,3.198,160,2.077,206,3.45,231,1.939,665,3.913,666,5.68,667,6.592,668,4.615,669,4.615,670,4.615,671,4.615]],["title/coverage.html",[672,3.504]],["body/coverage.html",[8,0.024,11,1.378,17,0.14,18,1.829,21,1.646,31,0.25,43,1.646,49,1.829,52,0.021,55,0.013,56,0.013,57,2.208,58,1.646,59,2.075,65,0.845,66,1.5,68,0.698,77,1.101,80,1.182,89,1.646,92,1.5,109,1.378,110,1.5,111,1.5,112,1.101,135,0.842,137,2.075,148,1.5,159,1.378,160,1.101,172,1.101,182,1.101,204,2.075,230,1.646,232,2.075,233,2.075,257,2.075,265,3.116,268,2.075,272,1.5,273,2.075,283,2.075,292,1.5,294,1.5,302,2.075,316,2.075,334,1.807,335,1.182,337,2.748,342,1.182,344,2.075,353,2.075,364,2.075,370,1.646,371,2.075,388,2.075,400,2.075,424,1.5,425,2.748,426,2.748,428,1.646,442,1.829,443,1.646,445,2.075,466,2.075,475,2.075,477,2.472,496,1.646,497,2.075,563,1.5,564,2.075,565,2.075,566,1.273,630,2.075,639,2.075,665,2.075,672,1.829,673,2.447,674,2.447,675,2.447,676,4.908,677,6.991,678,5.731,679,6.144,680,2.447,681,3.676,682,5.896,683,4.415,684,3.676,685,2.075,686,2.075,687,2.075,688,2.075,689,3.116,690,2.075,691,2.075,692,2.447,693,2.447,694,2.447,695,2.447,696,2.447]],["title/dependencies.html",[3,2.15,697,2.868]],["body/dependencies.html",[3,2.008,8,0.025,38,0.601,46,2.884,52,0.017,55,0.018,56,0.018,85,2.008,87,1.42,116,2.884,126,2.884,190,2.884,323,4.23,356,3.271,369,2.884,412,2.884,452,3.271,479,2.364,480,2.364,481,2.364,482,2.364,488,2.884,698,3.858,699,6.01,700,3.858,701,3.858,702,5.068,703,5.068,704,3.858,705,3.858,706,3.858,707,2.884,708,3.858,709,3.858,710,3.858,711,3.858,712,3.858,713,3.858,714,3.858,715,3.858,716,3.858,717,3.858,718,3.858,719,3.858,720,3.858,721,3.858,722,3.858,723,3.858,724,3.858,725,3.858,726,3.858,727,3.858]],["title/miscellaneous/functions.html",[728,1.615,729,3.502]],["body/miscellaneous/functions.html",[8,0.023,29,1.151,30,1.151,32,1.009,34,1.214,55,0.02,56,0.02,62,0.32,72,1.919,262,3.65,689,4.14,690,5.347,691,4.983,707,3.65,728,2.749,729,4.14,730,5.878,731,4.883]],["title/index.html",[62,0.188,417,2.431,732,2.868]],["body/index.html",[8,0.024,16,0.194,55,0.016,56,0.016,308,2.544,625,2.544,672,2.544,707,2.544,733,4.659,734,3.403,735,5.312,736,3.403,737,3.403,738,3.403,739,5.713,740,3.403,741,3.403,742,3.403,743,3.403,744,3.403,745,3.403,746,3.403,747,3.403,748,3.403,749,3.403,750,5.312,751,3.403,752,3.403,753,3.403,754,6.326,755,3.403,756,3.403,757,6.178,758,3.403,759,3.403,760,4.659,761,3.403,762,3.403,763,3.403,764,3.403,765,4.659,766,4.659,767,3.403,768,3.403,769,3.403,770,5.312,771,5.312,772,3.403,773,3.403,774,3.403,775,3.403,776,3.403,777,2.885,778,3.403,779,3.403,780,3.403,781,2.885,782,3.403,783,3.403,784,3.403,785,3.403,786,3.403,787,3.403,788,4.659,789,3.403,790,3.403,791,3.403,792,3.403,793,4.659,794,3.403,795,3.403,796,3.403,797,3.403,798,3.403]],["title/modules.html",[2,2.44]],["body/modules.html",[1,3.317,2,2.566,7,2.776,8,0.021,9,2.776,10,2.566,55,0.021,56,0.021,777,5.567,799,6.566,800,6.566,801,6.566]],["title/overview.html",[802,3.975]],["body/overview.html",[1,4.357,2,1.604,3,2.263,4,2.612,5,2.612,6,2.612,7,3.823,8,0.024,9,3.372,10,3.271,11,2.837,12,2.665,13,1.888,14,1.888,20,1.489,55,0.015,56,0.015,80,2.974,105,2.612,106,2.612,108,2.612,109,2.837,110,3.088,111,3.088,112,2.828,136,1.064,231,1.295,272,3.772,336,1.888,442,2.303,461,2.612,462,2.612,463,2.612,563,3.354,566,2.848,612,2.612,614,2.612,615,4.64,616,4.64,802,2.612,803,5.038,804,3.081,805,3.081,806,3.081]],["title/miscellaneous/typealiases.html",[728,1.615,807,4.131]],["body/miscellaneous/typealiases.html",[8,0.023,31,0.531,55,0.021,56,0.021,62,0.34,68,1.48,158,4.097,477,3.487,483,3.875,728,2.919,808,5.184,809,5.184]],["title/miscellaneous/variables.html",[728,1.615,810,3.502]],["body/miscellaneous/variables.html",[7,2.04,8,0.025,9,2.04,10,1.885,18,2.708,31,0.371,48,2.304,49,3.633,55,0.017,56,0.017,62,0.238,89,3.269,100,1.379,149,1.073,182,2.637,248,2.437,338,2.04,359,3.943,406,2.708,458,3.071,515,4.121,522,4.121,661,3.071,685,3.071,686,3.071,687,3.071,688,4.121,728,2.04,781,3.071,810,3.071,811,3.623,812,3.623,813,3.623,814,3.623,815,5.862,816,3.623,817,4.86,818,3.623,819,3.623,820,3.623,821,3.623,822,3.623,823,4.86,824,3.623,825,3.623,826,3.623,827,3.623,828,3.623,829,3.623,830,3.623,831,3.623]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"injectables/EveryMinuteService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ListResponse.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"interfaces/Paging.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"guards/RoleGuard.html":{},"modules/RoutinesModule.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":677,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":722,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":713,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":712,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":718,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":678,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":694,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":682,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":679,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":681,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":684,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":683,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":680,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":693,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":692,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":806,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":720,"title":{},"body":{"dependencies.html":{}}}],["1.0.2",{"_index":705,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":715,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":227,"title":{},"body":{"injectables/CryptoService.html":{}}}],["12",{"_index":804,"title":{},"body":{"overview.html":{}}}],["14.2.0",{"_index":717,"title":{},"body":{"dependencies.html":{}}}],["180",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{}}}],["3.0.0",{"_index":710,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":724,"title":{},"body":{"dependencies.html":{}}}],["3.0.3",{"_index":698,"title":{},"body":{"dependencies.html":{}}}],["32",{"_index":228,"title":{},"body":{"injectables/CryptoService.html":{}}}],["4",{"_index":803,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":719,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["5.1.5",{"_index":706,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":362,"title":{},"body":{"injectables/LogPipe.html":{},"injectables/UserService.html":{}}}],["7.1.0",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":700,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":701,"title":{},"body":{"dependencies.html":{}}}],["8.2.5",{"_index":699,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":805,"title":{},"body":{"overview.html":{}}}],["abstract",{"_index":631,"title":{},"body":{"classes/UserRepository.html":{}}}],["accessors",{"_index":666,"title":{},"body":{"classes/Utils.html":{}}}],["addons/in",{"_index":480,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["admin",{"_index":483,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{},"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":808,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allitems",{"_index":599,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["allitems.length",{"_index":600,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["allitems.slice(startindex",{"_index":601,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["already",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":778,"title":{},"body":{"index.html":{}}}],["angular",{"_index":748,"title":{},"body":{"index.html":{}}}],["api",{"_index":308,"title":{},"body":{"injectables/HealthService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["apibearerauth",{"_index":380,"title":{},"body":{"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":270,"title":{},"body":{"classes/Email.html":{},"classes/Login.html":{},"classes/Payload.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"classes/UserDto.html":{}}}],["apitags",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["apitags('auth",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('health",{"_index":296,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags('me",{"_index":382,"title":{},"body":{"controllers/MeController.html":{}}}],["apitags('user",{"_index":530,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":707,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["applications",{"_index":745,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":357,"title":{},"body":{"injectables/LogPipe.html":{}}}],["argumentshost",{"_index":239,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["async",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["auth.controller",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/signeduser.decorator",{"_index":381,"title":{},"body":{"controllers/MeController.html":{}}}],["authcontroller",{"_index":58,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["authmodule",{"_index":7,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["author",{"_index":788,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":80,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{}}}],["backend",{"_index":734,"title":{},"body":{"index.html":{}}}],["backers",{"_index":779,"title":{},"body":{"index.html":{}}}],["base",{"_index":484,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["based",{"_index":736,"title":{},"body":{"index.html":{}}}],["basic",{"_index":307,"title":{},"body":{"injectables/HealthService.html":{}}}],["body",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":213,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"guards/RoleGuard.html":{}}}],["bootstrap",{"_index":690,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":801,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":799,"title":{},"body":{"modules.html":{}}}],["building",{"_index":740,"title":{},"body":{"index.html":{}}}],["called",{"_index":281,"title":{},"body":{"injectables/EveryMinuteService.html":{},"controllers/UserController.html":{}}}],["callhandler",{"_index":407,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["canactivate",{"_index":446,"title":{},"body":{"guards/RoleGuard.html":{}}}],["canactivate(context",{"_index":450,"title":{},"body":{"guards/RoleGuard.html":{}}}],["candidatepassword",{"_index":210,"title":{},"body":{"injectables/CryptoService.html":{}}}],["catch",{"_index":235,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{}}}],["catch((err",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["catch(exception",{"_index":236,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["catch(httpexception",{"_index":242,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["checkpassword",{"_index":205,"title":{},"body":{"injectables/CryptoService.html":{}}}],["checkpassword(originalhash",{"_index":209,"title":{},"body":{"injectables/CryptoService.html":{}}}],["class",{"_index":52,"title":{"classes/CustomExceptionFilter.html":{},"classes/Email.html":{},"classes/Login.html":{},"classes/Payload.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"classes/Utils.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"injectables/EveryMinuteService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"guards/RoleGuard.html":{},"modules/RoutinesModule.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":231,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/Email.html":{},"classes/Login.html":{},"classes/Payload.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"classes/Utils.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_routinesmodule",{"_index":461,"title":{},"body":{"modules/RoutinesModule.html":{},"overview.html":{}}}],["cluster_routinesmodule_exports",{"_index":463,"title":{},"body":{"modules/RoutinesModule.html":{},"overview.html":{}}}],["cluster_routinesmodule_providers",{"_index":462,"title":{},"body":{"modules/RoutinesModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":612,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":614,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":613,"title":{},"body":{"modules/UserModule.html":{}}}],["completed",{"_index":421,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["compression",{"_index":714,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{}}}],["config.api.version",{"_index":315,"title":{},"body":{"injectables/HealthService.html":{}}}],["config.auth.jwt.secret",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["config.auth.jwt.ttl",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{}}}],["configure",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmpassword",{"_index":467,"title":{},"body":{"classes/SignUp.html":{}}}],["const",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/UserInMemoryRepository.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"guards/RoleGuard.html":{},"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":318,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["constructor(id",{"_index":390,"title":{},"body":{"classes/Payload.html":{}}}],["constructor(options",{"_index":427,"title":{},"body":{"injectables/QueryObjectPipe.html":{}}}],["constructor(private",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{}}}],["constructor(reflector",{"_index":447,"title":{},"body":{"guards/RoleGuard.html":{}}}],["constructor(repository",{"_index":641,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(requesttag",{"_index":403,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["constructor(service",{"_index":570,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["constructor(userservice",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["consumer",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(custommiddleware).forroutes('user",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["context",{"_index":409,"title":{},"body":{"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{}}}],["context.gethandler",{"_index":456,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":457,"title":{},"body":{"guards/RoleGuard.html":{}}}],["controller",{"_index":57,"title":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('health",{"_index":297,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('me",{"_index":383,"title":{},"body":{"controllers/MeController.html":{}}}],["controller('user",{"_index":531,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/HealthController.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["core/filters/custom",{"_index":525,"title":{},"body":{"controllers/UserController.html":{}}}],["core/guards/role.decorator",{"_index":523,"title":{},"body":{"controllers/UserController.html":{}}}],["core/guards/role.guard",{"_index":524,"title":{},"body":{"controllers/UserController.html":{}}}],["core/interceptors/performance.interceptor",{"_index":295,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["core/interfaces/paging",{"_index":527,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["core/middleware/custom.middleware",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["core/pipes/log.pipe",{"_index":293,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["core/pipes/query",{"_index":528,"title":{},"body":{"controllers/UserController.html":{}}}],["correct",{"_index":628,"title":{},"body":{"modules/UserModule.html":{}}}],["coverage",{"_index":672,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":498,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":545,"title":{},"body":{"controllers/UserController.html":{}}}],["create(user",{"_index":502,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["createasync(user",{"_index":590,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["created",{"_index":593,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{}}}],["createparamdecorator",{"_index":828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cron",{"_index":277,"title":{},"body":{"injectables/EveryMinuteService.html":{}}}],["cron(cronexpression.every_minute",{"_index":275,"title":{},"body":{"injectables/EveryMinuteService.html":{}}}],["cronexpression",{"_index":278,"title":{},"body":{"injectables/EveryMinuteService.html":{}}}],["crypto",{"_index":221,"title":{},"body":{"injectables/CryptoService.html":{}}}],["crypto.service",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["cryptoservice",{"_index":109,"title":{"injectables/CryptoService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"coverage.html":{},"overview.html":{}}}],["cryptoservice.gethash(candidatepassword",{"_index":225,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cryptoservice.gethash(password",{"_index":224,"title":{},"body":{"injectables/CryptoService.html":{}}}],["ctx",{"_index":830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customdecorator",{"_index":826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customexceptionfilter",{"_index":230,"title":{"classes/CustomExceptionFilter.html":{}},"body":{"classes/CustomExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["customexceptionfilter())@get(':id",{"_index":510,"title":{},"body":{"controllers/UserController.html":{}}}],["custommiddleware",{"_index":43,"title":{"injectables/CustomMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/CustomMiddleware.html":{},"coverage.html":{}}}],["data",{"_index":338,"title":{},"body":{"interfaces/ListResponse.html":{},"controllers/MeController.html":{},"interfaces/Paging.html":{},"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":282,"title":{},"body":{"injectables/EveryMinuteService.html":{}}}],["date.now",{"_index":419,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["db",{"_index":482,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["decorators",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"classes/Email.html":{},"injectables/EveryMinuteService.html":{},"controllers/HealthController.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{}}}],["default",{"_index":815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{}}}],["defaultvalue",{"_index":433,"title":{},"body":{"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{}}}],["defined",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"injectables/EveryMinuteService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"guards/RoleGuard.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{}}}],["delete",{"_index":519,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":556,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(id",{"_index":575,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["deletebyid",{"_index":499,"title":{},"body":{"controllers/UserController.html":{}}}],["deletebyid(@param",{"_index":557,"title":{},"body":{"controllers/UserController.html":{}}}],["deletebyid(id",{"_index":504,"title":{},"body":{"controllers/UserController.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoutinesModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":749,"title":{},"body":{"index.html":{}}}],["development",{"_index":756,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":673,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":716,"title":{},"body":{"dependencies.html":{}}}],["duplicates",{"_index":490,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["e2e",{"_index":767,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":741,"title":{},"body":{"index.html":{}}}],["email",{"_index":172,"title":{"classes/Email.html":{}},"body":{"injectables/AuthService.html":{},"classes/Email.html":{},"classes/Payload.html":{},"classes/SignUp.html":{},"interfaces/User.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["enable",{"_index":627,"title":{},"body":{"modules/UserModule.html":{}}}],["encodeuricomponent",{"_index":818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entity",{"_index":485,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["err",{"_index":440,"title":{},"body":{"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{}}}],["error('user",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["esc",{"_index":817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["esc(k",{"_index":822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["everyminute.service",{"_index":465,"title":{},"body":{"modules/RoutinesModule.html":{}}}],["everyminuteservice",{"_index":272,"title":{"injectables/EveryMinuteService.html":{}},"body":{"injectables/EveryMinuteService.html":{},"modules/RoutinesModule.html":{},"coverage.html":{},"overview.html":{}}}],["exception",{"_index":241,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["exception.filter",{"_index":526,"title":{},"body":{"controllers/UserController.html":{}}}],["exception.filter.ts",{"_index":233,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:11",{"_index":240,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["exception.stack",{"_index":245,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["exceptionfilter",{"_index":234,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["executioncontext",{"_index":406,"title":{},"body":{"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"miscellaneous/variables.html":{}}}],["existinguser",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguser.id",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"injectables/EveryMinuteService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ListResponse.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"interfaces/Paging.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"guards/RoleGuard.html":{},"modules/RoutinesModule.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{}}}],["exports",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{},"modules/RoutinesModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":703,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":325,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/SignUp.html":{},"interfaces/User.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{}}}],["extractjwt",{"_index":322,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":329,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":351,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["fastify",{"_index":704,"title":{},"body":{"dependencies.html":{}}}],["featured_modules",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["features",{"_index":491,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["file",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"injectables/EveryMinuteService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ListResponse.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"interfaces/Paging.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"guards/RoleGuard.html":{},"modules/RoutinesModule.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{},"coverage.html":{}}}],["fine",{"_index":313,"title":{},"body":{"injectables/HealthService.html":{}}}],["framework",{"_index":739,"title":{},"body":{"index.html":{}}}],["function",{"_index":265,"title":{},"body":{"injectables/CustomMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":729,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":550,"title":{},"body":{"controllers/UserController.html":{}}}],["get('list",{"_index":541,"title":{},"body":{"controllers/UserController.html":{}}}],["get('status",{"_index":300,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(@signeduser",{"_index":385,"title":{},"body":{"controllers/MeController.html":{}}}],["get(signeduser",{"_index":373,"title":{},"body":{"controllers/MeController.html":{}}}],["getall",{"_index":567,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["getbyid",{"_index":500,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["getbyid(@param",{"_index":551,"title":{},"body":{"controllers/UserController.html":{}}}],["getbyid(id",{"_index":507,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["getbylogin",{"_index":568,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["getbylogin(login",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["getbylogin(userdto.login",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["gethash",{"_index":207,"title":{},"body":{"injectables/CryptoService.html":{}}}],["gethash(password",{"_index":214,"title":{},"body":{"injectables/CryptoService.html":{}}}],["gethello",{"_index":285,"title":{},"body":{"controllers/HealthController.html":{}}}],["getpaged",{"_index":569,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["getpaged(paging",{"_index":580,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["getquerystring",{"_index":688,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getstatus",{"_index":303,"title":{},"body":{"injectables/HealthService.html":{}}}],["getting",{"_index":732,"title":{"index.html":{}},"body":{}}],["gettokenpayload",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokenpayload(user",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["getunauthorizedexception",{"_index":668,"title":{},"body":{"classes/Utils.html":{}}}],["grow",{"_index":774,"title":{},"body":{"index.html":{}}}],["guard",{"_index":442,"title":{"guards/RoleGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":444,"title":{},"body":{"guards/RoleGuard.html":{}}}],["handleeveryminutejob",{"_index":274,"title":{},"body":{"injectables/EveryMinuteService.html":{}}}],["hash",{"_index":222,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashpassword",{"_index":208,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashpassword(password",{"_index":216,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hasrole",{"_index":459,"title":{},"body":{"guards/RoleGuard.html":{}}}],["headers",{"_index":255,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["health",{"_index":284,"title":{},"body":{"controllers/HealthController.html":{},"injectables/HealthService.html":{}}}],["health.controller",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["health.service",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":21,"title":{"controllers/HealthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"coverage.html":{}}}],["healthservice",{"_index":11,"title":{"injectables/HealthService.html":{}},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"coverage.html":{},"overview.html":{}}}],["heavily",{"_index":746,"title":{},"body":{"index.html":{}}}],["here",{"_index":785,"title":{},"body":{"index.html":{}}}],["hit",{"_index":536,"title":{},"body":{"controllers/UserController.html":{}}}],["host",{"_index":238,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":247,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["httpargumentshost",{"_index":246,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["httpargumentshost.getrequest",{"_index":249,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["httpargumentshost.getresponse",{"_index":251,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["httpexception",{"_index":237,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"injectables/LogPipe.html":{},"injectables/UserService.html":{}}}],["httpexception('user",{"_index":664,"title":{},"body":{"injectables/UserService.html":{}}}],["https://nestjs.com",{"_index":792,"title":{},"body":{"index.html":{}}}],["id",{"_index":389,"title":{},"body":{"classes/Payload.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":674,"title":{},"body":{"coverage.html":{}}}],["implementation",{"_index":624,"title":{},"body":{"modules/UserModule.html":{}}}],["implements",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"injectables/LogPipe.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"guards/RoleGuard.html":{}}}],["import",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"injectables/EveryMinuteService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"guards/RoleGuard.html":{},"modules/RoutinesModule.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{}}}],["imports",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":62,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"injectables/EveryMinuteService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ListResponse.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"interfaces/Paging.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"guards/RoleGuard.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"injectables/EveryMinuteService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ListResponse.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"interfaces/Paging.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"guards/RoleGuard.html":{},"modules/RoutinesModule.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{}}}],["inherited",{"_index":471,"title":{},"body":{"classes/SignUp.html":{},"injectables/UserInMemoryRepository.html":{}}}],["initialized",{"_index":588,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["initswagger",{"_index":691,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["initswagger(app",{"_index":731,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectable",{"_index":135,"title":{"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"injectables/CustomMiddleware.html":{},"injectables/EveryMinuteService.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"injectables/CustomMiddleware.html":{},"injectables/EveryMinuteService.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"guards/RoleGuard.html":{},"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"injectables/CustomMiddleware.html":{},"injectables/EveryMinuteService.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["inmemory.repository",{"_index":619,"title":{},"body":{"modules/UserModule.html":{}}}],["inmemory.repository.ts",{"_index":565,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"coverage.html":{}}}],["inmemory.repository.ts:10",{"_index":572,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["inmemorydb",{"_index":487,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["inmemorydbentity",{"_index":478,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["inmemorydbmodule",{"_index":621,"title":{},"body":{"modules/UserModule.html":{}}}],["inmemorydbmodule.forroot",{"_index":622,"title":{},"body":{"modules/UserModule.html":{}}}],["inmemorydbservice",{"_index":571,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["inspired",{"_index":747,"title":{},"body":{"index.html":{}}}],["installation",{"_index":753,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":755,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intercept",{"_index":402,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["intercept(context",{"_index":405,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["interface",{"_index":334,"title":{"interfaces/ListResponse.html":{},"interfaces/Paging.html":{},"interfaces/QueryObjectPipeOptions.html":{},"interfaces/User.html":{}},"body":{"interfaces/ListResponse.html":{},"interfaces/Paging.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"interfaces/User.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["interfaces",{"_index":336,"title":{},"body":{"interfaces/ListResponse.html":{},"interfaces/Paging.html":{},"interfaces/QueryObjectPipeOptions.html":{},"interfaces/User.html":{},"overview.html":{}}}],["interfaces/login",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["interfaces/payload",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["interfaces/signup",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["interfaces/token",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["internal",{"_index":659,"title":{},"body":{"injectables/UserService.html":{}}}],["isarray",{"_index":432,"title":{},"body":{"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{}}}],["isemail",{"_index":474,"title":{},"body":{"classes/SignUp.html":{}}}],["isemail()@apiproperty",{"_index":469,"title":{},"body":{"classes/SignUp.html":{}}}],["isnotempty",{"_index":368,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{}}}],["isnotempty()@apiproperty",{"_index":365,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{}}}],["itemscount",{"_index":339,"title":{},"body":{"interfaces/ListResponse.html":{},"interfaces/Paging.html":{},"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{}}}],["job",{"_index":280,"title":{},"body":{"injectables/EveryMinuteService.html":{}}}],["join",{"_index":781,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["json.parse(value",{"_index":436,"title":{},"body":{"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{}}}],["json.stringify(params[k",{"_index":825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json.stringify(request.headers",{"_index":256,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["json.stringify(this.gettokenpayload(newuser",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["json.stringify(this.gettokenpayload(user",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":328,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":110,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["k",{"_index":821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kamil",{"_index":789,"title":{},"body":{"index.html":{}}}],["kononov",{"_index":796,"title":{},"body":{"index.html":{}}}],["last",{"_index":534,"title":{},"body":{"controllers/UserController.html":{}}}],["license",{"_index":798,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":771,"title":{},"body":{"index.html":{}}}],["list",{"_index":501,"title":{},"body":{"controllers/UserController.html":{}}}],["list(params",{"_index":512,"title":{},"body":{"controllers/UserController.html":{}}}],["listresponse",{"_index":335,"title":{"interfaces/ListResponse.html":{}},"body":{"interfaces/ListResponse.html":{},"interfaces/Paging.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["literal",{"_index":218,"title":{},"body":{"injectables/CryptoService.html":{}}}],["local",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localstrategy",{"_index":111,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logger",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"injectables/EveryMinuteService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{}}}],["logger.debug('exception",{"_index":243,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["logger.debug('getbyid",{"_index":552,"title":{},"body":{"controllers/UserController.html":{}}}],["logger.debug('guard",{"_index":453,"title":{},"body":{"guards/RoleGuard.html":{}}}],["logger.debug('interceptor",{"_index":416,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["logger.debug('list",{"_index":543,"title":{},"body":{"controllers/UserController.html":{}}}],["logger.debug('login",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["logger.debug('middleware",{"_index":267,"title":{},"body":{"injectables/CustomMiddleware.html":{}}}],["logger.debug('pipe",{"_index":361,"title":{},"body":{"injectables/LogPipe.html":{}}}],["logger.debug('user",{"_index":592,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["logger.debug('userinmemoryrepository",{"_index":587,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["logger.debug('validate",{"_index":331,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["logger.debug(`cron",{"_index":279,"title":{},"body":{"injectables/EveryMinuteService.html":{}}}],["logger.debug(metadata.data",{"_index":363,"title":{},"body":{"injectables/LogPipe.html":{}}}],["logger.debug(user",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger.error('request",{"_index":252,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["logger.error(err.message",{"_index":441,"title":{},"body":{"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{}}}],["logger.error(exception.message",{"_index":244,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["logger.log",{"_index":422,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["login",{"_index":65,"title":{"classes/Login.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Payload.html":{},"classes/SignUp.html":{},"interfaces/User.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["login(login",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login.tolocalelowercase",{"_index":605,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["login:11",{"_index":473,"title":{},"body":{"classes/SignUp.html":{}}}],["login:7",{"_index":472,"title":{},"body":{"classes/SignUp.html":{}}}],["logpipe",{"_index":292,"title":{"injectables/LogPipe.html":{}},"body":{"controllers/HealthController.html":{},"injectables/LogPipe.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["logpipe())@get('status",{"_index":288,"title":{},"body":{"controllers/HealthController.html":{}}}],["logpipe())@role('user')@useguards(roleguard)@useinterceptors(new",{"_index":508,"title":{},"body":{"controllers/UserController.html":{}}}],["map",{"_index":820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mapusertodto",{"_index":640,"title":{},"body":{"injectables/UserService.html":{}}}],["mapusertodto(user",{"_index":649,"title":{},"body":{"injectables/UserService.html":{}}}],["matching",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"injectables/EveryMinuteService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ListResponse.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"interfaces/Paging.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"guards/RoleGuard.html":{},"modules/RoutinesModule.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matters",{"_index":533,"title":{},"body":{"controllers/UserController.html":{}}}],["me.controller",{"_index":620,"title":{},"body":{"modules/UserModule.html":{}}}],["mecontroller",{"_index":370,"title":{"controllers/MeController.html":{}},"body":{"controllers/MeController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["memory",{"_index":481,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["metadata",{"_index":356,"title":{},"body":{"injectables/LogPipe.html":{},"dependencies.html":{}}}],["methods",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"injectables/EveryMinuteService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"controllers/MeController.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["middlewareconsumer",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["miscellaneous",{"_index":728,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":770,"title":{},"body":{"index.html":{}}}],["mode",{"_index":760,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoutinesModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoutinesModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoutinesModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":784,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":790,"title":{},"body":{"index.html":{}}}],["name",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":492,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["needs",{"_index":626,"title":{},"body":{"modules/UserModule.html":{}}}],["nest",{"_index":750,"title":{},"body":{"index.html":{}}}],["nest/swagger",{"_index":494,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["nester",{"_index":733,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":794,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":411,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["nestjs",{"_index":479,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"injectables/EveryMinuteService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"controllers/MeController.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"guards/RoleGuard.html":{},"modules/RoutinesModule.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Utils.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":452,"title":{},"body":{"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":702,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"injectables/EveryMinuteService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"classes/Email.html":{},"controllers/HealthController.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":266,"title":{},"body":{"injectables/CustomMiddleware.html":{}}}],["nestmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["never",{"_index":535,"title":{},"body":{"controllers/UserController.html":{}}}],["new",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EveryMinuteService.html":{},"injectables/LogPipe.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"classes/Utils.html":{},"coverage.html":{}}}],["next",{"_index":261,"title":{},"body":{"injectables/CustomMiddleware.html":{},"injectables/PerformanceInterceptor.html":{}}}],["next.handle().pipe",{"_index":420,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["node.js",{"_index":738,"title":{},"body":{"index.html":{}}}],["now",{"_index":418,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["now}ms",{"_index":423,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["npm",{"_index":754,"title":{},"body":{"index.html":{}}}],["number",{"_index":341,"title":{},"body":{"interfaces/ListResponse.html":{},"interfaces/Paging.html":{}}}],["object",{"_index":661,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["object.keys(params",{"_index":819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.pipe",{"_index":529,"title":{},"body":{"controllers/UserController.html":{}}}],["object.pipe.ts",{"_index":426,"title":{},"body":{"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"coverage.html":{}}}],["object.pipe.ts:12",{"_index":431,"title":{},"body":{"injectables/QueryObjectPipe.html":{}}}],["object.pipe.ts:9",{"_index":429,"title":{},"body":{"injectables/QueryObjectPipe.html":{}}}],["observable",{"_index":410,"title":{},"body":{"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{}}}],["open",{"_index":772,"title":{},"body":{"index.html":{}}}],["optional",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"guards/RoleGuard.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":430,"title":{},"body":{"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{}}}],["order",{"_index":532,"title":{},"body":{"controllers/UserController.html":{}}}],["originalhash",{"_index":212,"title":{},"body":{"injectables/CryptoService.html":{}}}],["out",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoutinesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["outside",{"_index":629,"title":{},"body":{"modules/UserModule.html":{}}}],["overview",{"_index":802,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwritten",{"_index":538,"title":{},"body":{"controllers/UserController.html":{}}}],["package",{"_index":697,"title":{"dependencies.html":{}},"body":{}}],["paging",{"_index":342,"title":{"interfaces/Paging.html":{}},"body":{"interfaces/ListResponse.html":{},"interfaces/Paging.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["paging.number",{"_index":597,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["paging.size",{"_index":598,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["param",{"_index":520,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":515,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["params[k",{"_index":823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partial",{"_index":573,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["particular",{"_index":623,"title":{},"body":{"modules/UserModule.html":{}}}],["passport",{"_index":323,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passport/jwt.strategy",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{}}}],["passport/local.strategy",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":324,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":326,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":350,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["password",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/SignUp.html":{},"interfaces/User.html":{},"classes/UserDto.html":{},"classes/Utils.html":{}}}],["password.hash",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["password.salt",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordfield",{"_index":349,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["path",{"_index":709,"title":{},"body":{"dependencies.html":{}}}],["payload",{"_index":148,"title":{"classes/Payload.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Payload.html":{},"coverage.html":{}}}],["payload(user.id",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["pbkdf2sync",{"_index":219,"title":{},"body":{"injectables/CryptoService.html":{}}}],["pbkdf2sync(password",{"_index":226,"title":{},"body":{"injectables/CryptoService.html":{}}}],["performanceinterceptor",{"_index":294,"title":{"injectables/PerformanceInterceptor.html":{}},"body":{"controllers/HealthController.html":{},"injectables/PerformanceInterceptor.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["performanceinterceptor('getbyid",{"_index":548,"title":{},"body":{"controllers/UserController.html":{}}}],["performanceinterceptor('status",{"_index":298,"title":{},"body":{"controllers/HealthController.html":{}}}],["performanceinterceptor())@usefilters(new",{"_index":509,"title":{},"body":{"controllers/UserController.html":{}}}],["performanceinterceptor())@usepipes(new",{"_index":287,"title":{},"body":{"controllers/HealthController.html":{}}}],["pipetransform",{"_index":360,"title":{},"body":{"injectables/LogPipe.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{}}}],["please",{"_index":782,"title":{},"body":{"index.html":{}}}],["post",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@useguards(undefined",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('sign",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["private",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/UserService.html":{}}}],["privatekey",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{}}}],["production",{"_index":762,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":737,"title":{},"body":{"index.html":{}}}],["project",{"_index":773,"title":{},"body":{"index.html":{}}}],["promise",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["promise.reject(err",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["promise.reject(utils.unauthorizedexception",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["promise.resolve(user",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":269,"title":{},"body":{"classes/Email.html":{},"interfaces/ListResponse.html":{},"classes/Login.html":{},"interfaces/Paging.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"interfaces/QueryObjectPipeOptions.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"classes/UserDto.html":{}}}],["provide",{"_index":615,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["providers",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoutinesModule.html":{},"modules/UserModule.html":{}}}],["provides",{"_index":306,"title":{},"body":{"injectables/HealthService.html":{}}}],["public",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"injectables/UserService.html":{},"classes/Utils.html":{}}}],["purposes",{"_index":311,"title":{},"body":{"injectables/HealthService.html":{},"injectables/UserService.html":{}}}],["put",{"_index":376,"title":{},"body":{"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["put(':id",{"_index":517,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":522,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["query('params",{"_index":542,"title":{},"body":{"controllers/UserController.html":{}}}],["queryasync",{"_index":602,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["queryobjectpipe",{"_index":424,"title":{"injectables/QueryObjectPipe.html":{}},"body":{"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["queryobjectpipeoptions",{"_index":428,"title":{"interfaces/QueryObjectPipeOptions.html":{}},"body":{"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"coverage.html":{}}}],["randombytes",{"_index":220,"title":{},"body":{"injectables/CryptoService.html":{}}}],["randombytes(32).tostring('hex",{"_index":223,"title":{},"body":{"injectables/CryptoService.html":{}}}],["read",{"_index":783,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{}}}],["record",{"_index":816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":721,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":448,"title":{},"body":{"guards/RoleGuard.html":{}}}],["released",{"_index":495,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["repository",{"_index":625,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":264,"title":{},"body":{"injectables/CustomMiddleware.html":{}}}],["request",{"_index":248,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"guards/RoleGuard.html":{},"miscellaneous/variables.html":{}}}],["request.url",{"_index":254,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["request.user",{"_index":458,"title":{},"body":{"guards/RoleGuard.html":{},"miscellaneous/variables.html":{}}}],["requesttag",{"_index":401,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["res",{"_index":260,"title":{},"body":{"injectables/CustomMiddleware.html":{}}}],["reset",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoutinesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":250,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{}}}],["result",{"_index":607,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{}}}],["result.data.map((user",{"_index":657,"title":{},"body":{"injectables/UserService.html":{}}}],["result.itemscount",{"_index":658,"title":{},"body":{"injectables/UserService.html":{}}}],["result.length",{"_index":608,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{}}}],["result.map((user",{"_index":654,"title":{},"body":{"injectables/UserService.html":{}}}],["result[0",{"_index":609,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["results",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"injectables/EveryMinuteService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ListResponse.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"interfaces/Paging.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"guards/RoleGuard.html":{},"modules/RoutinesModule.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"controllers/MeController.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"injectables/EveryMinuteService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"controllers/MeController.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"classes/Payload.html":{},"guards/RoleGuard.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["role('admin",{"_index":539,"title":{},"body":{"controllers/UserController.html":{}}}],["role('admin')@useguards(roleguard)@delete(':id",{"_index":505,"title":{},"body":{"controllers/UserController.html":{}}}],["role('admin')@useguards(roleguard)@get('list",{"_index":513,"title":{},"body":{"controllers/UserController.html":{}}}],["role('user",{"_index":547,"title":{},"body":{"controllers/UserController.html":{}}}],["roleguard",{"_index":443,"title":{"guards/RoleGuard.html":{}},"body":{"guards/RoleGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["root",{"_index":708,"title":{},"body":{"dependencies.html":{}}}],["routines/routines.module",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["routinesmodule",{"_index":9,"title":{"modules/RoutinesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RoutinesModule.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["rule",{"_index":537,"title":{},"body":{"controllers/UserController.html":{}}}],["run",{"_index":757,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":412,"title":{},"body":{"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":414,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["salt",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"interfaces/User.html":{},"classes/UserDto.html":{}}}],["scalable",{"_index":742,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["scope",{"_index":584,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["scope.default",{"_index":586,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["secret",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":330,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":743,"title":{},"body":{"index.html":{}}}],["service",{"_index":305,"title":{},"body":{"injectables/HealthService.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{}}}],["setmetadata('role",{"_index":827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sha512').tostring('hex",{"_index":229,"title":{},"body":{"injectables/CryptoService.html":{}}}],["side",{"_index":744,"title":{},"body":{"index.html":{}}}],["signeduser",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MeController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signeduser.decorator",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(user",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":66,"title":{"classes/SignUp.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignUp.html":{},"coverage.html":{}}}],["signup(@body",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(userdto",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["size",{"_index":343,"title":{},"body":{"interfaces/ListResponse.html":{},"interfaces/Paging.html":{}}}],["source",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"injectables/EveryMinuteService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/ListResponse.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"interfaces/Paging.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"guards/RoleGuard.html":{},"modules/RoutinesModule.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{},"index.html":{}}}],["sponsors",{"_index":776,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":730,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role.decorator.ts",{"_index":813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../signeduser.decorator.ts",{"_index":814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.interface.ts",{"_index":809,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../utils.ts",{"_index":812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts:19",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:19",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:27",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:19",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:23",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:51",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:58",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:63",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/crypto.service.ts",{"_index":204,"title":{},"body":{"injectables/CryptoService.html":{},"coverage.html":{}}}],["src/auth/crypto.service.ts:12",{"_index":211,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/auth/crypto.service.ts:21",{"_index":215,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/auth/crypto.service.ts:6",{"_index":217,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/auth/interfaces/email.ts",{"_index":268,"title":{},"body":{"classes/Email.html":{},"coverage.html":{}}}],["src/auth/interfaces/email.ts:5",{"_index":271,"title":{},"body":{"classes/Email.html":{}}}],["src/auth/interfaces/login.ts",{"_index":364,"title":{},"body":{"classes/Login.html":{},"coverage.html":{}}}],["src/auth/interfaces/login.ts:11",{"_index":367,"title":{},"body":{"classes/Login.html":{}}}],["src/auth/interfaces/login.ts:7",{"_index":366,"title":{},"body":{"classes/Login.html":{}}}],["src/auth/interfaces/payload.ts",{"_index":388,"title":{},"body":{"classes/Payload.html":{},"coverage.html":{}}}],["src/auth/interfaces/payload.ts:12",{"_index":393,"title":{},"body":{"classes/Payload.html":{}}}],["src/auth/interfaces/payload.ts:15",{"_index":394,"title":{},"body":{"classes/Payload.html":{}}}],["src/auth/interfaces/payload.ts:18",{"_index":392,"title":{},"body":{"classes/Payload.html":{}}}],["src/auth/interfaces/payload.ts:21",{"_index":395,"title":{},"body":{"classes/Payload.html":{}}}],["src/auth/interfaces/payload.ts:3",{"_index":391,"title":{},"body":{"classes/Payload.html":{}}}],["src/auth/interfaces/signup.ts",{"_index":466,"title":{},"body":{"classes/SignUp.html":{},"coverage.html":{}}}],["src/auth/interfaces/signup.ts:12",{"_index":468,"title":{},"body":{"classes/SignUp.html":{}}}],["src/auth/interfaces/signup.ts:8",{"_index":470,"title":{},"body":{"classes/SignUp.html":{}}}],["src/auth/interfaces/token.ts",{"_index":475,"title":{},"body":{"classes/Token.html":{},"coverage.html":{}}}],["src/auth/interfaces/token.ts:5",{"_index":476,"title":{},"body":{"classes/Token.html":{}}}],["src/auth/passport/jwt.strategy.ts",{"_index":316,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/passport/jwt.strategy.ts:11",{"_index":319,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/passport/jwt.strategy.ts:19",{"_index":321,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/passport/local.strategy.ts",{"_index":344,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/passport/local.strategy.ts:18",{"_index":347,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/passport/local.strategy.ts:9",{"_index":345,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/signeduser.decorator.ts",{"_index":685,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/utils.ts",{"_index":665,"title":{},"body":{"classes/Utils.html":{},"coverage.html":{}}}],["src/auth/utils.ts:4",{"_index":669,"title":{},"body":{"classes/Utils.html":{}}}],["src/core/filters/custom",{"_index":232,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"coverage.html":{}}}],["src/core/guards/role.decorator.ts",{"_index":686,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/guards/role.guard.ts",{"_index":445,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/core/guards/role.guard.ts:11",{"_index":449,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/core/guards/role.guard.ts:14",{"_index":451,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/core/interceptors/performance.interceptor.ts",{"_index":400,"title":{},"body":{"injectables/PerformanceInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/performance.interceptor.ts:13",{"_index":404,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["src/core/interceptors/performance.interceptor.ts:19",{"_index":408,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["src/core/interfaces/paging.ts",{"_index":337,"title":{},"body":{"interfaces/ListResponse.html":{},"interfaces/Paging.html":{},"coverage.html":{}}}],["src/core/middleware/custom.middleware.ts",{"_index":257,"title":{},"body":{"injectables/CustomMiddleware.html":{},"coverage.html":{}}}],["src/core/middleware/custom.middleware.ts:5",{"_index":263,"title":{},"body":{"injectables/CustomMiddleware.html":{}}}],["src/core/pipes/log.pipe.ts",{"_index":353,"title":{},"body":{"injectables/LogPipe.html":{},"coverage.html":{}}}],["src/core/pipes/log.pipe.ts:10",{"_index":358,"title":{},"body":{"injectables/LogPipe.html":{}}}],["src/core/pipes/query",{"_index":425,"title":{},"body":{"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"coverage.html":{}}}],["src/core/utils.ts",{"_index":687,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/health.controller.ts",{"_index":283,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health.controller.ts:15",{"_index":289,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health.service.ts",{"_index":302,"title":{},"body":{"injectables/HealthService.html":{},"coverage.html":{}}}],["src/health.service.ts:9",{"_index":304,"title":{},"body":{"injectables/HealthService.html":{}}}],["src/main.ts",{"_index":689,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/routines/everyminute.service.ts",{"_index":273,"title":{},"body":{"injectables/EveryMinuteService.html":{},"coverage.html":{}}}],["src/routines/everyminute.service.ts:7",{"_index":276,"title":{},"body":{"injectables/EveryMinuteService.html":{}}}],["src/routines/routines.module.ts",{"_index":464,"title":{},"body":{"modules/RoutinesModule.html":{}}}],["src/user/me.controller.ts",{"_index":371,"title":{},"body":{"controllers/MeController.html":{},"coverage.html":{}}}],["src/user/me.controller.ts:17",{"_index":374,"title":{},"body":{"controllers/MeController.html":{}}}],["src/user/me.controller.ts:22",{"_index":377,"title":{},"body":{"controllers/MeController.html":{}}}],["src/user/user",{"_index":564,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":497,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:40",{"_index":514,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:49",{"_index":503,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:59",{"_index":511,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:65",{"_index":518,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:72",{"_index":506,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.interface.ts",{"_index":477,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/user/user.interface.ts:25",{"_index":560,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/user.interface.ts:28",{"_index":561,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/user.interface.ts:31",{"_index":559,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/user.interface.ts:34",{"_index":562,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/user.module.ts",{"_index":617,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.repository.ts",{"_index":630,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/user/user.repository.ts:10",{"_index":635,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/user.repository.ts:11",{"_index":636,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/user.repository.ts:5",{"_index":632,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/user.repository.ts:6",{"_index":638,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/user.repository.ts:7",{"_index":633,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/user.repository.ts:8",{"_index":634,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/user.repository.ts:9",{"_index":637,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/user.service.ts",{"_index":639,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:10",{"_index":643,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:16",{"_index":646,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:22",{"_index":645,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:32",{"_index":648,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:42",{"_index":647,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:46",{"_index":651,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:53",{"_index":644,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:57",{"_index":650,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:7",{"_index":642,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":758,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":761,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":763,"title":{},"body":{"index.html":{}}}],["started",{"_index":417,"title":{"index.html":{}},"body":{"injectables/PerformanceInterceptor.html":{}}}],["starter",{"_index":752,"title":{},"body":{"index.html":{}}}],["startindex",{"_index":596,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["statements",{"_index":675,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":206,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/UserService.html":{},"classes/Utils.html":{}}}],["status",{"_index":309,"title":{},"body":{"injectables/HealthService.html":{}}}],["stay",{"_index":786,"title":{},"body":{"index.html":{}}}],["stored",{"_index":486,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["straight",{"_index":660,"title":{},"body":{"injectables/UserService.html":{}}}],["strategy",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/Email.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":327,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UserInMemoryRepository.html":{}}}],["support",{"_index":777,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":800,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":488,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["t",{"_index":340,"title":{},"body":{"interfaces/ListResponse.html":{},"interfaces/Paging.html":{}}}],["table",{"_index":696,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":695,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":413,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["template",{"_index":735,"title":{},"body":{"index.html":{}}}],["test",{"_index":766,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":769,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":768,"title":{},"body":{"index.html":{}}}],["testing",{"_index":310,"title":{},"body":{"injectables/HealthService.html":{}}}],["tests",{"_index":765,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":775,"title":{},"body":{"index.html":{}}}],["then((existinguser",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["then((result",{"_index":606,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{}}}],["then((user",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserInMemoryRepository.html":{}}}],["this.authservice.login(login",{"_index":352,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authservice.signin(user",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(userdto",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(payload",{"_index":332,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.cryptoservice.checkpassword",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptoservice.hashpassword",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.email",{"_index":398,"title":{},"body":{"classes/Payload.html":{}}}],["this.healthservice.getstatus",{"_index":301,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.id",{"_index":396,"title":{},"body":{"classes/Payload.html":{}}}],["this.jwtservice.sign",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(json.stringify(this.gettokenpayload(newuser",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.login",{"_index":397,"title":{},"body":{"classes/Payload.html":{}}}],["this.options.defaultvalue",{"_index":437,"title":{},"body":{"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{}}}],["this.options.isarray",{"_index":439,"title":{},"body":{"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{}}}],["this.reflector.get('role",{"_index":455,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.repository",{"_index":652,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repository.delete(id",{"_index":663,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repository.getbylogin(login",{"_index":662,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repository.getpaged(paging).then((result",{"_index":656,"title":{},"body":{"injectables/UserService.html":{}}}],["this.requesttag",{"_index":415,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["this.role",{"_index":399,"title":{},"body":{"classes/Payload.html":{}}}],["this.service",{"_index":589,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["this.service.create(user",{"_index":546,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.delete(id",{"_index":558,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.deleteasync(id",{"_index":594,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["this.service.getallasync().topromise",{"_index":595,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["this.service.getasync(id).topromise",{"_index":610,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["this.service.getbyid(id",{"_index":553,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.getbyid(signeduser.id",{"_index":386,"title":{},"body":{"controllers/MeController.html":{}}}],["this.service.getpaged(params",{"_index":544,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.update(id",{"_index":555,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.update(signeduser.id",{"_index":387,"title":{},"body":{"controllers/MeController.html":{}}}],["this.service.updateasync(user).topromise",{"_index":611,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["this.userservice",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.create(user).then((newuser",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getbylogin(payload.login",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"injectables/UserService.html":{}}}],["token",{"_index":92,"title":{"classes/Token.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Token.html":{},"coverage.html":{}}}],["topromise",{"_index":591,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["touch",{"_index":787,"title":{},"body":{"index.html":{}}}],["transform",{"_index":354,"title":{},"body":{"injectables/LogPipe.html":{},"injectables/QueryObjectPipe.html":{}}}],["transform(value",{"_index":355,"title":{},"body":{"injectables/LogPipe.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{}}}],["transformer",{"_index":711,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":454,"title":{},"body":{"guards/RoleGuard.html":{}}}],["try",{"_index":435,"title":{},"body":{"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{}}}],["twitter",{"_index":793,"title":{},"body":{"index.html":{}}}],["type",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"injectables/JwtStrategy.html":{},"interfaces/ListResponse.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"interfaces/Paging.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"guards/RoleGuard.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":807,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":751,"title":{},"body":{"index.html":{}}}],["ui",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":667,"title":{},"body":{"classes/Utils.html":{}}}],["unauthorizedexception('invalid",{"_index":670,"title":{},"body":{"classes/Utils.html":{}}}],["undefined",{"_index":438,"title":{},"body":{"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"injectables/UserInMemoryRepository.html":{}}}],["unit",{"_index":764,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["until",{"_index":493,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["up",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["update",{"_index":372,"title":{},"body":{"controllers/MeController.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["update(@param",{"_index":554,"title":{},"body":{"controllers/UserController.html":{}}}],["update(id",{"_index":516,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(signeduser",{"_index":375,"title":{},"body":{"controllers/MeController.html":{}}}],["update(user",{"_index":582,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["url",{"_index":253,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["usage",{"_index":489,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{}}}],["use",{"_index":258,"title":{},"body":{"injectables/CustomMiddleware.html":{},"modules/UserModule.html":{}}}],["use(req",{"_index":259,"title":{},"body":{"injectables/CustomMiddleware.html":{}}}],["useclass",{"_index":616,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["used",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["usefilters",{"_index":521,"title":{},"body":{"controllers/UserController.html":{}}}],["usefilters(new",{"_index":549,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard('jwt",{"_index":384,"title":{},"body":{"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard('local",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(roleguard",{"_index":540,"title":{},"body":{"controllers/UserController.html":{}}}],["useinterceptors",{"_index":290,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(new",{"_index":286,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["usepipes",{"_index":291,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["usepipes(new",{"_index":299,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":68,"title":{"interfaces/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"guards/RoleGuard.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["user.controller",{"_index":618,"title":{},"body":{"modules/UserModule.html":{}}}],["user.email",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.id",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.interface",{"_index":379,"title":{},"body":{"controllers/MeController.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["user.login",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.password",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.repository",{"_index":585,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.role",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"guards/RoleGuard.html":{},"injectables/UserService.html":{}}}],["user.roles",{"_index":460,"title":{},"body":{"guards/RoleGuard.html":{}}}],["user.salt",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":378,"title":{},"body":{"controllers/MeController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.interface",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["user/user.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["usercontroller",{"_index":496,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":77,"title":{"classes/UserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MeController.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userdto.email",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdto.login",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdto.password",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["userinmemoryrepository",{"_index":563,"title":{"injectables/UserInMemoryRepository.html":{}},"body":{"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["usermodule",{"_index":10,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["username",{"_index":671,"title":{},"body":{"classes/Utils.html":{}}}],["usernamefield",{"_index":348,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrepository",{"_index":566,"title":{"classes/UserRepository.html":{}},"body":{"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userrepository:16",{"_index":574,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["userrepository:26",{"_index":576,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["userrepository:30",{"_index":577,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["userrepository:34",{"_index":581,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["userrepository:44",{"_index":579,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["userrepository:56",{"_index":578,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["userrepository:60",{"_index":583,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["userrole",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/User.html":{},"classes/UserDto.html":{},"miscellaneous/typealiases.html":{}}}],["userservice",{"_index":112,"title":{"injectables/UserService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservice.mapusertodto(result",{"_index":653,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice.mapusertodto(user",{"_index":655,"title":{},"body":{"injectables/UserService.html":{}}}],["utils",{"_index":159,"title":{"classes/Utils.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Utils.html":{},"coverage.html":{}}}],["utils.unauthorizedexception",{"_index":333,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["v",{"_index":434,"title":{},"body":{"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{}}}],["valentin",{"_index":795,"title":{},"body":{"index.html":{}}}],["valentinkononov",{"_index":797,"title":{},"body":{"index.html":{}}}],["validate",{"_index":317,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(login",{"_index":346,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":320,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(payload",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":369,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{},"dependencies.html":{}}}],["value",{"_index":359,"title":{},"body":{"injectables/LogPipe.html":{},"injectables/QueryObjectPipe.html":{},"interfaces/QueryObjectPipeOptions.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":676,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":810,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":314,"title":{},"body":{"injectables/HealthService.html":{},"interfaces/User.html":{},"classes/UserDto.html":{}}}],["void",{"_index":262,"title":{},"body":{"injectables/CustomMiddleware.html":{},"injectables/EveryMinuteService.html":{},"miscellaneous/functions.html":{}}}],["watch",{"_index":759,"title":{},"body":{"index.html":{}}}],["website",{"_index":791,"title":{},"body":{"index.html":{}}}],["working",{"_index":312,"title":{},"body":{"injectables/HealthService.html":{}}}],["x",{"_index":603,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["x.login.tolocalelowercase",{"_index":604,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["you'd",{"_index":780,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoutinesModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nRoutinesModule\n\nRoutinesModule\n\nAppModule -->\n\nRoutinesModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nHealthService\n\nHealthService\n\nAppModule -->\n\nHealthService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HealthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            RoutinesModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Logger, MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { HealthController } from './health.controller';\nimport { HealthService } from './health.service';\nimport { AuthModule } from './auth/auth.module';\nimport { UserModule } from './user/user.module';\n\nimport { CustomMiddleware } from './core/middleware/custom.middleware';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { RoutinesModule } from './routines/routines.module';\n\nconst FEATURED_MODULES = [AuthModule, UserModule, RoutinesModule];\n\n@Module({\n    imports: [ScheduleModule.forRoot(), ...FEATURED_MODULES],\n    controllers: [HealthController],\n    providers: [HealthService, Logger],\n})\nexport class AppModule implements NestModule {\n    configure(consumer: MiddlewareConsumer): any {\n        consumer.apply(CustomMiddleware).forRoutes('user');\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(login: Login, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    login\n                                    \n                                                Login\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(userDto: SignUp)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-up')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                SignUp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { Login } from './interfaces/login';\nimport { UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiTags } from '@nestjs/swagger';\nimport { SignUp } from './interfaces/signUp';\nimport { SignedUser } from './signedUser.decorator';\nimport { User } from '../user/user.interface';\nimport { Token } from './interfaces/token';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n    constructor(private readonly authService: AuthService) {}\n\n    @Post('login')\n    @UseGuards(AuthGuard('local'))\n    public async login(\n        @Body() login: Login,\n        @SignedUser() user: User,\n    ): Promise {\n        return await this.authService.signIn(user);\n    }\n\n    @Post('sign-up')\n    async signUp(@Body() userDto: SignUp): Promise {\n        return await this.authService.signUp(userDto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nAuthModule -->\n\nCryptoService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthModule -->\n\nUserService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            CryptoService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './passport/jwt.strategy';\nimport { PassportModule } from '@nestjs/passport';\nimport { UserModule } from '../user/user.module';\nimport { UserService } from '../user/user.service';\nimport { CryptoService } from './crypto.service';\nimport { AuthController } from './auth.controller';\nimport { LocalStrategy } from './passport/local.strategy';\nimport config from '../config';\n\n@Module({\n    imports: [\n        PassportModule.register({ defaultStrategy: 'jwt' }),\n        JwtModule.register({\n            secret: config.auth.jwt.secret,\n            privateKey: config.auth.jwt.secret,\n            signOptions: {\n                // expiresIn: 180, // config.auth.jwt.ttl,\n            },\n        }),\n        UserModule,\n    ],\n    controllers: [AuthController],\n    providers: [\n        AuthService,\n        JwtStrategy,\n        LocalStrategy,\n        UserService,\n        CryptoService,\n    ],\n    exports: [PassportModule, AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getTokenPayload\n                            \n                            \n                                    Public\n                                    Async\n                                logIn\n                            \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                            \n                                    Public\n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, cryptoService: CryptoService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getTokenPayload\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokenPayload(user: User | UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User | UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Payload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(login: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    login\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(userDto: SignUp)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                SignUp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(payload: Payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                Payload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { JwtService } from '@nestjs/jwt';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { UserService } from '../user/user.service';\nimport { Payload } from './interfaces/payload';\nimport { User, UserDto, UserRole } from '../user/user.interface';\nimport { CryptoService } from './crypto.service';\nimport { SignUp } from './interfaces/signUp';\nimport { Token } from './interfaces/token';\nimport { Utils } from './utils';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        private readonly userService: UserService,\n        private readonly cryptoService: CryptoService,\n        private readonly jwtService: JwtService,\n    ) {}\n\n    private getTokenPayload(user: User | UserDto): Payload {\n        return new Payload(user.id, user.login, user.email, user.role);\n    }\n\n    public async signUp(userDto: SignUp): Promise {\n        return await this.userService\n            .getByLogin(userDto.login)\n            .then((existingUser) => {\n                if (existingUser && existingUser.id) {\n                    throw new Error('User with this email already exists');\n                }\n                const password = this.cryptoService.hashPassword(\n                    userDto.password,\n                );\n                const user = {\n                    email: userDto.email,\n                    login: userDto.login,\n                    password: password.hash,\n                    salt: password.salt,\n                    role: 'user' as UserRole,\n                };\n\n                return this.userService.create(user).then((newUser) => {\n                    // const token = this.jwtService.sign(JSON.stringify(this.getTokenPayload(newUser)));\n                    const token = this.jwtService.sign(\n                        JSON.stringify(this.getTokenPayload(newUser)),\n                    );\n                    return { token };\n                });\n            });\n    }\n\n    public async signIn(user: User): Promise {\n        const token = this.jwtService.sign(\n            JSON.stringify(this.getTokenPayload(user)),\n        );\n        return { token };\n    }\n\n    async validateUser(payload: Payload): Promise {\n        return await this.userService.getByLogin(payload.login);\n    }\n\n    // used in local auth strategy\n    public async logIn(login: string, password: string): Promise {\n        Logger.debug('login');\n        return await this.userService\n            .getByLogin(login)\n            .then((user) => {\n                Logger.debug(user);\n                if (user && user.id) {\n                    return this.cryptoService.checkPassword(\n                        user.password,\n                        user.salt,\n                        password,\n                    )\n                        ? Promise.resolve(user)\n                        : Promise.reject(Utils.UnAuthorizedException);\n                } else {\n                    return Promise.reject(Utils.UnAuthorizedException);\n                }\n            })\n            .catch((err) => Promise.reject(err));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoService.html":{"url":"injectables/CryptoService.html","title":"injectable - CryptoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/crypto.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                checkPassword\n                            \n                            \n                                    Private\n                                    Static\n                                getHash\n                            \n                            \n                                    Public\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        checkPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkPassword(originalHash: string, salt: string, candidatePassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/crypto.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    originalHash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    candidatePassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        getHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHash(password: string, salt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/crypto.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/crypto.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { pbkdf2Sync, randomBytes } from 'crypto';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class CryptoService {\n    public hashPassword(password: string): { salt: string; hash: string } {\n        const salt = randomBytes(32).toString('hex');\n        const hash = CryptoService.getHash(password, salt);\n        return { salt, hash };\n    }\n\n    public checkPassword(\n        originalHash: string,\n        salt: string,\n        candidatePassword: string,\n    ): boolean {\n        const hash = CryptoService.getHash(candidatePassword, salt);\n        return hash === originalHash;\n    }\n\n    private static getHash(password: string, salt: string): string {\n        return pbkdf2Sync(password, salt, 1024, 32, 'sha512').toString('hex');\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomExceptionFilter.html":{"url":"classes/CustomExceptionFilter.html","title":"class - CustomExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/custom-exception.filter.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ArgumentsHost,\n    Catch,\n    ExceptionFilter,\n    HttpException,\n    Logger,\n} from '@nestjs/common';\n\n@Catch(HttpException)\nexport class CustomExceptionFilter implements ExceptionFilter {\n    catch(exception: HttpException, host: ArgumentsHost): any {\n        Logger.debug('Exception');\n        Logger.error(exception.message, exception.stack);\n\n        const httpArgumentsHost = host.switchToHttp();\n        const request = httpArgumentsHost.getRequest();\n        // const response = httpArgumentsHost.getResponse();\n\n        Logger.error('Request URL:', request.url);\n        Logger.error('Request headers:', JSON.stringify(request.headers));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomMiddleware.html":{"url":"injectables/CustomMiddleware.html","title":"injectable - CustomMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middleware/custom.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middleware/custom.middleware.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from '@nestjs/common';\n\n@Injectable()\nexport class CustomMiddleware implements NestMiddleware {\n    use(req: Request, res: Response, next: () => void): any {\n        Logger.debug('Middleware');\n        next();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Email.html":{"url":"classes/Email.html","title":"class - Email","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Email\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/email.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/interfaces/email.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class Email {\n    @ApiProperty()\n    email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EveryMinuteService.html":{"url":"injectables/EveryMinuteService.html","title":"injectable - EveryMinuteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EveryMinuteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/routines/everyMinute.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleEveryMinuteJob\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleEveryMinuteJob\n                        \n                    \n                \n            \n            \n                \nhandleEveryMinuteJob()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_MINUTE)\n                \n            \n\n            \n                \n                    Defined in src/routines/everyMinute.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\n\n@Injectable()\nexport class EveryMinuteService {\n    @Cron(CronExpression.EVERY_MINUTE)\n    handleEveryMinuteJob(): void {\n        Logger.debug(`Cron Job was called at: ${new Date()}`);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(new PerformanceInterceptor())@UsePipes(new LogPipe())@Get('status')\n                \n            \n\n            \n                \n                    Defined in src/health.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseInterceptors, UsePipes } from '@nestjs/common';\nimport { HealthService } from './health.service';\nimport { ApiTags } from '@nestjs/swagger';\nimport { LogPipe } from './core/pipes/log.pipe';\nimport { PerformanceInterceptor } from './core/interceptors/performance.interceptor';\n\n@ApiTags('health')\n@Controller('health')\nexport class HealthController {\n    constructor(private readonly healthService: HealthService) {}\n\n    @UseInterceptors(new PerformanceInterceptor('status'))\n    @UsePipes(new LogPipe())\n    @Get('status')\n    getHello(): string {\n        return this.healthService.getStatus();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HealthService.html":{"url":"injectables/HealthService.html","title":"injectable - HealthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HealthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getStatus\n                        \n                    \n                \n            \n            \n                \ngetStatus()\n                \n            \n\n\n            \n                \n                    Defined in src/health.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport config from './config';\n\n/*\n * Health Service class, provides basic API status for testing purposes\n */\n@Injectable()\nexport class HealthService {\n    getStatus(): string {\n        return `API is working fine ! Version: ${config.api.version}`;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/jwt.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: Payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/jwt.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                Payload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { AuthService } from '../auth.service';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { Payload } from '../interfaces/payload';\nimport { Utils } from '../utils';\nimport config from '../../config';\nimport { User } from '../../user/user.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor(private readonly authService: AuthService) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            secretOrKey: config.auth.jwt.secret,\n        });\n    }\n\n    async validate(payload: Payload): Promise {\n        Logger.debug('Validate User');\n        const user = await this.authService.validateUser(payload);\n        if (!user) {\n            throw Utils.UnAuthorizedException;\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ListResponse.html":{"url":"interfaces/ListResponse.html","title":"interface - ListResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ListResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/paging.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            itemsCount\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        itemsCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemsCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paging {\n    number: number;\n    size: number;\n}\n\nexport interface ListResponse {\n    data: T[];\n    itemsCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/local.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(login: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/local.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    login\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { AuthService } from '../auth.service';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { Utils } from '../utils';\nimport { User } from '../../user/user.interface';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(private readonly authService: AuthService) {\n        super({\n            usernameField: 'login',\n            passwordField: 'password',\n            passReqToCallback: false,\n        });\n    }\n\n    async validate(login: string, password: string): Promise {\n        Logger.debug('Login ' + login);\n        const user = await this.authService.logIn(login, password);\n        if (!user) {\n            throw Utils.UnAuthorizedException;\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogPipe.html":{"url":"injectables/LogPipe.html","title":"injectable - LogPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/log.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/log.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    ArgumentMetadata,\n    Injectable,\n    Logger,\n    PipeTransform,\n} from '@nestjs/common';\n\n@Injectable()\nexport class LogPipe implements PipeTransform {\n    transform(value: any, metadata: ArgumentMetadata): any {\n        Logger.debug('Pipe');\n        // throw new HttpException('', 500);\n        Logger.debug(metadata.data);\n        return value;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Login.html":{"url":"classes/Login.html","title":"class - Login","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Login\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/login.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/interfaces/login.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/interfaces/login.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\n\nexport class Login {\n    @IsNotEmpty()\n    @ApiProperty()\n    login: string;\n\n    @IsNotEmpty()\n    @ApiProperty()\n    password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MeController.html":{"url":"controllers/MeController.html","title":"controller - MeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/me.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                me\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(signedUser: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/user/me.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signedUser\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(signedUser: User, data: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()\n                \n            \n\n            \n                \n                    Defined in src/user/me.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signedUser\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Put, Body } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { User, UserDto } from './user.interface';\nimport { UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiTags, ApiBearerAuth } from '@nestjs/swagger';\nimport { SignedUser } from '../auth/signedUser.decorator';\n\n@ApiBearerAuth()\n@ApiTags('me')\n@Controller('me')\n@UseGuards(AuthGuard('jwt'))\nexport class MeController {\n    constructor(private readonly service: UserService) {}\n\n    @Get()\n    async get(@SignedUser() signedUser: User): Promise {\n        return await this.service.getById(signedUser.id);\n    }\n\n    @Put()\n    async update(\n        @SignedUser() signedUser: User,\n        @Body() data: User,\n    ): Promise {\n        return await this.service.update(signedUser.id, data);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paging.html":{"url":"interfaces/Paging.html","title":"interface - Paging","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paging\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/paging.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            number\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        number\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        number:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paging {\n    number: number;\n    size: number;\n}\n\nexport interface ListResponse {\n    data: T[];\n    itemsCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Payload.html":{"url":"classes/Payload.html","title":"class - Payload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Payload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/payload.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                login\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, login: string, email: string, role: string)\n                    \n                \n                        \n                            \n                                Defined in src/auth/interfaces/payload.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        login\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        email\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        role\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/interfaces/payload.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/interfaces/payload.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/interfaces/payload.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/interfaces/payload.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class Payload {\n    constructor(id: string, login: string, email: string, role: string) {\n        this.id = id;\n        this.login = login;\n        this.email = email;\n        this.role = role;\n    }\n\n    @ApiProperty()\n    id: string;\n\n    @ApiProperty()\n    login: string;\n\n    @ApiProperty()\n    email: string;\n\n    @ApiProperty()\n    role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PerformanceInterceptor.html":{"url":"injectables/PerformanceInterceptor.html","title":"injectable - PerformanceInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PerformanceInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/performance.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                requestTag\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(requestTag: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/interceptors/performance.interceptor.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        requestTag\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/performance.interceptor.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        requestTag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/core/interceptors/performance.interceptor.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n    Logger,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class PerformanceInterceptor implements NestInterceptor {\n    private readonly requestTag: string;\n\n    constructor(requestTag: string) {\n        this.requestTag = requestTag;\n    }\n\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        Logger.debug('Interceptor started');\n        const now = Date.now();\n        return next.handle().pipe(\n            tap(() => {\n                Logger.debug('Interceptor completed');\n                Logger.log(\n                    `${this.requestTag} completed in: ${Date.now() - now}ms`,\n                );\n            }),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueryObjectPipe.html":{"url":"injectables/QueryObjectPipe.html","title":"injectable - QueryObjectPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueryObjectPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/query-object.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: QueryObjectPipeOptions)\n                    \n                \n                        \n                            \n                                Defined in src/core/pipes/query-object.pipe.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        QueryObjectPipeOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/query-object.pipe.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, PipeTransform, Logger } from '@nestjs/common';\n\nexport interface QueryObjectPipeOptions {\n    isArray?: boolean;\n    defaultValue?: V;\n}\n\n@Injectable()\nexport class QueryObjectPipe implements PipeTransform {\n    constructor(private options: QueryObjectPipeOptions = {}) {}\n\n    transform(value: string): any {\n        try {\n            if (value) {\n                return JSON.parse(value);\n            } else if (this.options.defaultValue !== undefined) {\n                return this.options.defaultValue;\n            } else {\n                return this.options.isArray ? [] : {};\n            }\n        } catch (err) {\n            Logger.error(err.message);\n            return this.options.isArray ? [] : {};\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QueryObjectPipeOptions.html":{"url":"interfaces/QueryObjectPipeOptions.html","title":"interface - QueryObjectPipeOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QueryObjectPipeOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/query-object.pipe.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            defaultValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isArray\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        defaultValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultValue:     V\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     V\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isArray\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isArray:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, PipeTransform, Logger } from '@nestjs/common';\n\nexport interface QueryObjectPipeOptions {\n    isArray?: boolean;\n    defaultValue?: V;\n}\n\n@Injectable()\nexport class QueryObjectPipe implements PipeTransform {\n    constructor(private options: QueryObjectPipeOptions = {}) {}\n\n    transform(value: string): any {\n        try {\n            if (value) {\n                return JSON.parse(value);\n            } else if (this.options.defaultValue !== undefined) {\n                return this.options.defaultValue;\n            } else {\n                return this.options.isArray ? [] : {};\n            }\n        } catch (err) {\n            Logger.error(err.message);\n            return this.options.isArray ? [] : {};\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/core/guards/role.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/guards/role.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/core/guards/role.guard.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    Injectable,\n    Logger,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n    constructor(private readonly reflector: Reflector) {}\n\n    canActivate(\n        context: ExecutionContext,\n    ): boolean | Promise | Observable {\n        Logger.debug('Guard');\n        return true;\n        const role = this.reflector.get('role', context.getHandler());\n        if (!role) {\n            return true;\n        }\n        const request = context.switchToHttp().getRequest();\n        const user = request.user;\n        const hasRole = (): boolean => user.role === role;\n        return user && user.roles && hasRole();\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoutinesModule.html":{"url":"modules/RoutinesModule.html","title":"module - RoutinesModule","body":"\n                   \n\n\n\n\n    Modules\n    RoutinesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RoutinesModule\n\n\n\ncluster_RoutinesModule_providers\n\n\n\ncluster_RoutinesModule_exports\n\n\n\n\nEveryMinuteService \n\nEveryMinuteService \n\n\n\nRoutinesModule\n\nRoutinesModule\n\nEveryMinuteService  -->\n\nRoutinesModule->EveryMinuteService \n\n\n\n\n\nEveryMinuteService\n\nEveryMinuteService\n\nRoutinesModule -->\n\nEveryMinuteService->RoutinesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/routines/routines.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EveryMinuteService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EveryMinuteService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EveryMinuteService } from './everyMinute.service';\n\n@Module({\n    providers: [EveryMinuteService],\n    exports: [EveryMinuteService],\n})\nexport class RoutinesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUp.html":{"url":"classes/SignUp.html","title":"class - SignUp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/signUp.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Login\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmPassword\n                            \n                            \n                                email\n                            \n                            \n                                login\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/interfaces/signUp.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/interfaces/signUp.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         Login\n\n                            \n                        \n                    \n                        \n                                Defined in         Login:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         Login\n\n                            \n                        \n                    \n                        \n                                Defined in         Login:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Login } from './login';\nimport { IsEmail, IsNotEmpty } from 'class-validator';\n\nexport class SignUp extends Login {\n    @IsEmail()\n    @ApiProperty()\n    email: string;\n\n    @IsNotEmpty()\n    @ApiProperty()\n    confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Token.html":{"url":"classes/Token.html","title":"class - Token","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Token\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/token.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/interfaces/token.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class Token {\n    @ApiProperty()\n    token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    InMemoryDBEntity\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            login\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            salt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        login:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         UserRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserRole\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        salt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        salt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { InMemoryDBEntity } from '@nestjs-addons/in-memory-db';\n\n/*\n * User role can be 'admin' or 'user'\n */\nexport type UserRole = 'admin' | 'user';\n\n/*\n * Base User entity, stored in InMemoryDB\n */\nexport interface User extends InMemoryDBEntity {\n    password?: string;\n    salt?: string;\n    login: string;\n    email: string;\n    role: UserRole;\n}\n\n/*\n * User class for Swagger usage - duplicates features of User interface\n * Need until new version of nest/swagger is released\n */\nexport class UserDto {\n    id: string;\n\n    @ApiProperty()\n    login: string;\n\n    @ApiProperty()\n    email: string;\n\n    @ApiProperty()\n    role: UserRole;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                list\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role('admin')@UseGuards(RoleGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UsePipes(new LogPipe())@Role('user')@UseGuards(RoleGuard)@UseInterceptors(new PerformanceInterceptor())@UseFilters(new CustomExceptionFilter())@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        list\n                        \n                    \n                \n            \n            \n                \n                    \n                    list(params: Paging)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role('admin')@UseGuards(RoleGuard)@Get('list')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                Paging\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Post,\n    Put,\n    Delete,\n    Body,\n    Param,\n    Logger,\n    UsePipes,\n    UseInterceptors,\n    UseFilters,\n    Query,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { User, UserDto } from './user.interface';\nimport { UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiTags, ApiBearerAuth } from '@nestjs/swagger';\nimport { Role } from '../core/guards/role.decorator';\nimport { RoleGuard } from '../core/guards/role.guard';\nimport { LogPipe } from '../core/pipes/log.pipe';\nimport { PerformanceInterceptor } from '../core/interceptors/performance.interceptor';\nimport { CustomExceptionFilter } from '../core/filters/custom-exception.filter';\nimport { ListResponse, Paging } from '../core/interfaces/paging';\nimport { QueryObjectPipe } from '../core/pipes/query-object.pipe';\n\n@ApiBearerAuth()\n@ApiTags('user')\n@Controller('user')\n@UseGuards(AuthGuard('jwt'))\nexport class UserController {\n    constructor(private readonly service: UserService) {}\n\n    // Order of controller methods matters, if 'list' will be the last, it will never be hit because rule is overwritten by :id\n\n    @Role('admin')\n    @UseGuards(RoleGuard)\n    @Get('list')\n    async list(\n        @Query('params', new QueryObjectPipe())\n        params: Paging,\n    ): Promise> {\n        Logger.debug('List called');\n        return await this.service.getPaged(params);\n    }\n\n    @Post()\n    async create(@Body() user: User): Promise {\n        return await this.service.create(user);\n    }\n\n    @UsePipes(new LogPipe())\n    @Role('user')\n    @UseGuards(RoleGuard)\n    @UseInterceptors(new PerformanceInterceptor('getById'))\n    @UseFilters(new CustomExceptionFilter())\n    @Get(':id')\n    async getById(@Param() id: string): Promise {\n        Logger.debug('getById called');\n        return await this.service.getById(id);\n    }\n\n    @Put(':id')\n    async update(@Param() id: string, @Body() user: User): Promise {\n        return await this.service.update(id, user);\n    }\n\n    @Role('admin')\n    @UseGuards(RoleGuard)\n    @Delete(':id')\n    async deleteById(@Param() id: string): Promise {\n        return await this.service.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.interface.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                login\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.interface.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/user.interface.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.interface.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.interface.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { InMemoryDBEntity } from '@nestjs-addons/in-memory-db';\n\n/*\n * User role can be 'admin' or 'user'\n */\nexport type UserRole = 'admin' | 'user';\n\n/*\n * Base User entity, stored in InMemoryDB\n */\nexport interface User extends InMemoryDBEntity {\n    password?: string;\n    salt?: string;\n    login: string;\n    email: string;\n    role: UserRole;\n}\n\n/*\n * User class for Swagger usage - duplicates features of User interface\n * Need until new version of nest/swagger is released\n */\nexport class UserDto {\n    id: string;\n\n    @ApiProperty()\n    login: string;\n\n    @ApiProperty()\n    email: string;\n\n    @ApiProperty()\n    role: UserRole;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserInMemoryRepository.html":{"url":"injectables/UserInMemoryRepository.html","title":"injectable - UserInMemoryRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserInMemoryRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-inmemory.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        UserRepository\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getByLogin\n                            \n                            \n                                    Async\n                                getPaged\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(service: InMemoryDBService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-inmemory.repository.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        InMemoryDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         UserRepository\n\n                \n            \n            \n                \n                        Defined in         UserRepository:16\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         UserRepository\n\n                \n            \n            \n                \n                        Defined in         UserRepository:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Inherited from         UserRepository\n\n                \n            \n            \n                \n                        Defined in         UserRepository:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         UserRepository\n\n                \n            \n            \n                \n                        Defined in         UserRepository:56\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByLogin(login: string)\n                \n            \n\n\n            \n                \n                    Inherited from         UserRepository\n\n                \n            \n            \n                \n                        Defined in         UserRepository:44\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    login\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPaged\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPaged(paging: Paging)\n                \n            \n\n\n            \n                \n                    Inherited from         UserRepository\n\n                \n            \n            \n                \n                        Defined in         UserRepository:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paging\n                                    \n                                                Paging\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(user: User)\n                \n            \n\n\n            \n                \n                    Inherited from         UserRepository\n\n                \n            \n            \n                \n                        Defined in         UserRepository:60\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, Scope } from '@nestjs/common';\nimport { UserRepository } from './user.repository';\nimport { User } from './user.interface';\nimport { InMemoryDBService } from '@nestjs-addons/in-memory-db';\nimport { ListResponse, Paging } from '../core/interfaces/paging';\n\n@Injectable({\n    scope: Scope.DEFAULT,\n})\nexport class UserInMemoryRepository extends UserRepository {\n    constructor(private readonly service: InMemoryDBService) {\n        super();\n        Logger.debug('UserInMemoryRepository initialized');\n    }\n\n    async create(user: Partial): Promise {\n        return this.service\n            .createAsync(user)\n            .toPromise()\n            .then((user) => {\n                Logger.debug('user created');\n                return user;\n            });\n    }\n\n    async delete(id: string): Promise {\n        await this.service.deleteAsync(id);\n    }\n\n    async getAll(): Promise {\n        return this.service.getAllAsync().toPromise();\n    }\n\n    async getPaged(paging: Paging): Promise> {\n        const startIndex = paging.number * paging.size;\n        const allItems = await this.service.getAllAsync().toPromise();\n        const itemsCount = allItems.length;\n        return {\n            data: allItems.slice(startIndex, startIndex + paging.size),\n            itemsCount,\n        };\n    }\n\n    async getByLogin(login: string): Promise {\n        return this.service\n            .queryAsync(\n                (x) =>\n                    x.login.toLocaleLowerCase() === login.toLocaleLowerCase(),\n            )\n            .toPromise()\n            .then((result) =>\n                result && result.length ? result[0] : undefined,\n            );\n    }\n\n    async getById(id: string): Promise {\n        return this.service.getAsync(id).toPromise();\n    }\n\n    async update(user: User): Promise {\n        return this.service.updateAsync(user).toPromise();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\n{ provide: UserRepository, useClass: UserInMemoryRepository } \n\n{ provide: UserRepository, useClass: UserInMemoryRepository } \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n{ provide: UserRepository, useClass: UserInMemoryRepository }  -->\n\nUserModule->{ provide: UserRepository, useClass: UserInMemoryRepository } \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            MeController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                        \n                            { provide: UserRepository, useClass: UserInMemoryRepository }\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { UserInMemoryRepository } from './user-inmemory.repository';\nimport { UserRepository } from './user.repository';\nimport { MeController } from './me.controller';\nimport { InMemoryDBModule } from '@nestjs-addons/in-memory-db';\n\n@Module({\n    imports: [InMemoryDBModule.forRoot()],\n    controllers: [UserController, MeController],\n    providers: [\n        UserService,\n        // use particular implementation of repository interface\n        { provide: UserRepository, useClass: UserInMemoryRepository },\n    ],\n    exports: [\n        UserService,\n        // needs to enable correct usage of UserService outside of UserModule\n        { provide: UserRepository, useClass: UserInMemoryRepository },\n    ],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.repository.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                create\n                            \n                            \n                                    Abstract\n                                delete\n                            \n                            \n                                    Abstract\n                                getAll\n                            \n                            \n                                    Abstract\n                                getById\n                            \n                            \n                                    Abstract\n                                getByLogin\n                            \n                            \n                                    Abstract\n                                getPaged\n                            \n                            \n                                    Abstract\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        getByLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByLogin(login: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    login\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        getPaged\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPaged(paging: Paging)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paging\n                                    \n                                                Paging\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { User } from './user.interface';\nimport { ListResponse, Paging } from '../core/interfaces/paging';\n\nexport abstract class UserRepository {\n    abstract create(user: Partial): Promise;\n    abstract update(user: Partial): Promise;\n    abstract delete(id: string): Promise;\n    abstract getAll(): Promise;\n    abstract getPaged(paging: Paging): Promise>;\n    abstract getById(id: string): Promise;\n    abstract getByLogin(login: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                getAll\n                            \n                            \n                                    Public\n                                    Async\n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                getByLogin\n                            \n                            \n                                    Public\n                                    Async\n                                getPaged\n                            \n                            \n                                    Private\n                                    Static\n                                mapUserToDto\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getByLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByLogin(login: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    login\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getPaged\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPaged(paging: Paging)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paging\n                                    \n                                                Paging\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        mapUserToDto\n                        \n                    \n                \n            \n            \n                \n                    \n                    mapUserToDto(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         UserDto\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, Injectable } from '@nestjs/common';\nimport { User, UserDto } from './user.interface';\nimport { UserRepository } from './user.repository';\nimport { ListResponse, Paging } from '../core/interfaces/paging';\n\n@Injectable()\nexport class UserService {\n    constructor(private readonly repository: UserRepository) {}\n\n    public async create(user: Partial): Promise {\n        return this.repository\n            .create(user)\n            .then((result) => UserService.mapUserToDto(result));\n    }\n\n    public async getById(id: string): Promise {\n        return this.repository\n            .getById(id)\n            .then((result) => UserService.mapUserToDto(result));\n    }\n\n    public async getAll(): Promise {\n        return this.repository\n            .getAll()\n            .then((result) =>\n                result && result.length\n                    ? result.map((user) => UserService.mapUserToDto(user))\n                    : [],\n            );\n    }\n\n    public async getPaged(paging: Paging): Promise> {\n        return this.repository.getPaged(paging).then((result) => {\n            return {\n                data: result.data.map((user) => UserService.mapUserToDto(user)),\n                itemsCount: result.itemsCount,\n            };\n        });\n    }\n\n    // used for internal API purposes, returns straight User object from Data Source\n    public async getByLogin(login: string): Promise {\n        return this.repository.getByLogin(login);\n    }\n\n    public async update(id: string, user: User): Promise {\n        user.id = id;\n        return this.repository\n            .update(user)\n            .then(() => UserService.mapUserToDto(user));\n    }\n\n    public async delete(id: string): Promise {\n        await this.repository.delete(id);\n    }\n\n    private static mapUserToDto(user: User): UserDto {\n        if (!user) {\n            throw new HttpException('User not created', 500);\n        }\n        return {\n            id: user.id,\n            login: user.login,\n            email: user.email,\n            role: user.role,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Utils.html":{"url":"classes/Utils.html","title":"class - Utils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Utils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/utils.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    UnAuthorizedException\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        UnAuthorizedException\n                    \n                \n\n                \n                    \n                        getUnAuthorizedException()\n                    \n                \n                            \n                                \n                                    Defined in src/auth/utils.ts:4\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { UnauthorizedException } from '@nestjs/common';\n\nexport class Utils {\n    public static get UnAuthorizedException(): UnauthorizedException {\n        return new UnauthorizedException('Invalid username or password');\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            FEATURED_MODULES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/crypto.service.ts\n            \n            injectable\n            CryptoService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/interfaces/email.ts\n            \n            class\n            Email\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/interfaces/login.ts\n            \n            class\n            Login\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/interfaces/payload.ts\n            \n            class\n            Payload\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/interfaces/signUp.ts\n            \n            class\n            SignUp\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/interfaces/token.ts\n            \n            class\n            Token\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/passport/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/passport/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/signedUser.decorator.ts\n            \n            variable\n            SignedUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/utils.ts\n            \n            class\n            Utils\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/filters/custom-exception.filter.ts\n            \n            class\n            CustomExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/guards/role.decorator.ts\n            \n            variable\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/guards/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/interceptors/performance.interceptor.ts\n            \n            injectable\n            PerformanceInterceptor\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/interfaces/paging.ts\n            \n            interface\n            ListResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/interfaces/paging.ts\n            \n            interface\n            Paging\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/middleware/custom.middleware.ts\n            \n            injectable\n            CustomMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/log.pipe.ts\n            \n            injectable\n            LogPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/query-object.pipe.ts\n            \n            injectable\n            QueryObjectPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/pipes/query-object.pipe.ts\n            \n            interface\n            QueryObjectPipeOptions\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/utils.ts\n            \n            variable\n            getQueryString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/health.service.ts\n            \n            injectable\n            HealthService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            initSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routines/everyMinute.service.ts\n            \n            injectable\n            EveryMinuteService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/me.controller.ts\n            \n            controller\n            MeController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user-inmemory.repository.ts\n            \n            injectable\n            UserInMemoryRepository\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.interface.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.interface.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-addons/in-memory-db : ^3.0.3\n        \n            @nestjs/common : ^8.2.5\n        \n            @nestjs/core : ^8.2.5\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.1.0\n        \n            @nestjs/platform-express : ^8.2.5\n        \n            @nestjs/platform-fastify : ^8.2.5\n        \n            @nestjs/schedule : ^1.0.2\n        \n            @nestjs/swagger : ^5.1.5\n        \n            app-root-path : ^3.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            compression : ^1.7.4\n        \n            dotenv : ^14.2.0\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.1.0\n        \n            swagger-ui-express : ^4.3.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            initSwagger   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initSwagger\n                        \n                    \n                \n            \n            \n                \ninitSwagger(app)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nNester - backend API template based on\n\n\n  \n  /\n  \n\n\nA progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n\n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nFramework Author - Kamil Myśliwiec\n\nFramework Website - https://nestjs.com\n\nTwitter - @nestframework\n\nTemplate Author - Valentin Kononov\n\nTwitter - @ValentinKononov\n\n\nLicense\n  Nest is MIT licensed\n  Nester Template is MIT licensed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoutinesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_RoutinesModule\n\n\n\ncluster_RoutinesModule_exports\n\n\n\ncluster_RoutinesModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nRoutinesModule\n\nRoutinesModule\n\nAppModule -->\n\nRoutinesModule->AppModule\n\n\n\n\n\nEveryMinuteService \n\nEveryMinuteService \n\nEveryMinuteService  -->\n\nRoutinesModule->EveryMinuteService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\n{ provide: UserRepository, useClass: UserInMemoryRepository } \n\n{ provide: UserRepository, useClass: UserInMemoryRepository } \n\n{ provide: UserRepository, useClass: UserInMemoryRepository }  -->\n\nUserModule->{ provide: UserRepository, useClass: UserInMemoryRepository } \n\n\n\n\n\nHealthService\n\nHealthService\n\nAppModule -->\n\nHealthService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nAuthModule -->\n\nCryptoService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthModule -->\n\nUserService->AuthModule\n\n\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nEveryMinuteService\n\nEveryMinuteService\n\nRoutinesModule -->\n\nEveryMinuteService->RoutinesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserRole   (src/.../user.interface.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/user.interface.ts\n    \n    \n        \n            \n                \n                    \n                    UserRole\n                \n            \n            \n                \n                        \"admin\" | \"user\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            FEATURED_MODULES   (src/.../app.module.ts)\n                        \n                        \n                            getQueryString   (src/.../utils.ts)\n                        \n                        \n                            Role   (src/.../role.decorator.ts)\n                        \n                        \n                            SignedUser   (src/.../signedUser.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FEATURED_MODULES\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [AuthModule, UserModule, RoutinesModule]\n                    \n                \n\n\n        \n    \n\n    src/core/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getQueryString\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (params: Record): string => {\n    if (!params) return '';\n\n    const esc = encodeURIComponent;\n    const query = Object.keys(params)\n        .map(\n            (k) =>\n                esc(k) +\n                '=' +\n                esc(\n                    params[k] instanceof Object\n                        ? JSON.stringify(params[k])\n                        : params[k],\n                ),\n        )\n        .join('&');\n    return query;\n}\n                    \n                \n\n\n        \n    \n\n    src/core/guards/role.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Role\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (role: string): CustomDecorator =>\n    SetMetadata('role', role)\n                    \n                \n\n\n        \n    \n\n    src/auth/signedUser.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SignedUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user;\n    },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
