var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.397,1,2.164]],["body/modules/AppModule.html",[0,2.03,1,4.059,2,1.581,3,1.581,4,1.916,5,1.916,6,1.581,7,3.146,8,1.916,9,2.45,10,2.45,11,2.45,12,3.094,13,0.029,14,2.839,15,3.094,16,2.711,17,1.916,18,1.916,19,0.237,20,0.206,21,0.206,22,2.144,23,1.892,24,3.146,25,3.034,26,0.63,27,2.914,28,4.124,29,5.205,30,0.338,31,2.914,32,0.63,33,0.63,34,0.303,35,0.582,36,4.124,37,0.63,38,0.503,39,1.396,40,4.124,41,0.494,42,2.914,43,2.45,44,2.914,45,2.45,46,2.914,47,2.144,48,2.45,49,2.914,50,2.914,51,1.916,52,1.581,53,2.144,54,1.581,55,2.144,56,1.916,57,2.914,58,1.337,59,3.034,60,2.914,61,0.237,62,0.056,63,1.581,64,2.914,65,2.914,66,0.012,67,0.018,68,0.012]],["title/controllers/AuthController.html",[69,1.397,70,2.164]],["body/controllers/AuthController.html",[13,0.029,19,0.249,20,0.216,21,0.216,23,1.404,26,0.923,30,0.496,32,0.923,33,0.923,34,0.444,35,0.853,37,0.923,38,0.484,41,0.723,61,0.249,62,0.059,66,0.013,67,0.018,68,0.013,69,1.298,70,2.805,71,2.572,72,2.011,73,2.572,74,0.216,75,2.922,76,2.457,77,1.907,78,3.444,79,2.572,80,3.676,81,1.677,82,3.06,83,3.06,84,2.572,85,4.268,86,4.268,87,3.06,88,2.125,89,2.251,90,2.251,91,2.572,92,2.255,93,2.011,94,3.06,95,2.251,96,2.251,97,1.523,98,2.011,99,1.036,100,2.572,101,3.06,102,3.06,103,1.298,104,1.115,105,3.06,106,3.06,107,3.06,108,1.158,109,1.958,110,3.06,111,3.06,112,3.06]],["title/modules/AuthModule.html",[0,1.397,12,1.787]],["body/modules/AuthModule.html",[0,1.957,2,1.48,3,1.48,4,1.793,5,1.793,6,1.48,7,3.033,8,3.033,12,3.5,13,0.029,14,2.778,16,2.586,17,1.793,18,1.793,19,0.222,20,0.193,21,0.193,23,1.805,25,2.894,38,0.502,41,0.462,45,2.293,51,2.586,61,0.222,62,0.052,66,0.012,67,0.017,68,0.012,70,3.033,92,2.858,93,1.793,97,1.358,113,2.293,114,2.728,115,2.293,116,2.293,117,3.027,118,3.317,119,3.317,120,2.366,121,2.728,122,2.728,123,2.007,124,2.728,125,3.934,126,2.293,127,2.293,128,2.728,129,2.728,130,2.728,131,2.728,132,2.007,133,2.728,134,2.728,135,3.307,136,2.728,137,2.728,138,2.728,139,2.728,140,2.728]],["title/injectables/AuthService.html",[92,1.511,141,0.511]],["body/injectables/AuthService.html",[13,0.029,19,0.153,20,0.133,21,0.133,26,0.642,30,0.562,32,1.046,33,1.046,34,0.435,35,0.967,37,0.984,38,0.44,39,0.637,41,0.319,58,2.088,61,0.153,62,0.036,66,0.008,67,0.013,68,0.008,73,1.582,74,0.133,75,3.213,76,2.434,77,1.315,78,2.876,79,2.497,84,2.497,88,2.266,92,1.363,100,1.582,104,1.342,108,1.466,109,1.689,117,2.748,120,2.052,123,1.384,126,1.582,127,1.582,141,0.461,142,0.686,143,1.582,144,3.179,145,2.971,146,2.971,147,2.971,148,1.363,149,1.882,150,5.064,151,1.882,152,2.971,153,1.502,154,1.882,155,3.012,156,2.219,157,1.882,158,2.971,159,1.882,160,2.876,161,1.882,162,2.971,163,1.882,164,1.582,165,1.953,166,1.882,167,3.179,168,1.882,169,1.612,170,1.479,171,1.882,172,1.582,173,1.582,174,1.384,175,1.882,176,1.882,177,1.882,178,1.882,179,1.119,180,1.882,181,1.26,182,1.882,183,1.882,184,1.882,185,1.882,186,1.882,187,1.882,188,1.237,189,1.882,190,0.798,191,1.882,192,1.882,193,2.971,194,1.882,195,1.882,196,1.582,197,1.384,198,1.384,199,1.582,200,1.882,201,1.882,202,1.582,203,1.882,204,1.882,205,1.882,206,2.971,207,1.882,208,1.882]],["title/injectables/CryptoService.html",[117,1.787,141,0.511]],["body/injectables/CryptoService.html",[13,0.029,19,0.242,20,0.21,21,0.21,26,0.903,30,0.561,32,1.045,33,1.045,34,0.503,35,0.966,37,1.045,38,0.34,41,0.503,58,2.218,61,0.242,62,0.057,66,0.013,67,0.018,68,0.013,74,0.21,75,3.411,108,1.312,117,2.266,141,0.648,142,1.082,144,3.177,156,1.917,188,4.158,209,2.494,210,4.177,211,4.177,212,4.177,213,4.177,214,1.778,215,4.834,216,2.967,217,4.177,218,2.494,219,4.177,220,2.967,221,4.177,222,2.967,223,5.53,224,2.967,225,2.967,226,2.967,227,2.967,228,2.967,229,2.967,230,2.967,231,2.967,232,2.967,233,2.967]],["title/classes/CustomExceptionFilter.html",[62,0.063,234,2.164]],["body/classes/CustomExceptionFilter.html",[13,0.028,19,0.329,20,0.286,21,0.286,26,1.111,30,0.469,32,0.874,33,0.874,34,0.421,35,0.808,37,0.874,38,0.329,39,1.368,41,0.684,61,0.329,62,0.077,63,2.788,66,0.017,67,0.022,68,0.017,74,0.286,234,3.377,235,1.588,236,4.319,237,3.397,238,5.649,239,5.649,240,5.138,241,4.373,242,5.649,243,5.945,244,4.041,245,4.041,246,4.041,247,4.041]],["title/injectables/CustomMiddleware.html",[56,2.164,141,0.511]],["body/injectables/CustomMiddleware.html",[13,0.028,19,0.321,20,0.279,21,0.279,26,1.094,30,0.458,32,0.853,33,0.853,34,0.411,35,0.788,37,0.853,38,0.321,39,1.335,41,0.668,56,3.325,61,0.321,62,0.076,63,2.14,66,0.017,67,0.021,68,0.017,74,0.279,80,2.592,91,4.695,141,0.785,142,1.438,248,3.315,249,4.253,250,5.059,251,4.695,252,5.585,253,4.952,254,5.585,255,3.944,256,3.315,257,5.059,258,3.944]],["title/classes/Email.html",[62,0.063,181,1.397]],["body/classes/Email.html",[13,0.028,19,0.365,20,0.317,21,0.317,30,0.521,34,0.467,38,0.365,61,0.365,62,0.086,66,0.019,67,0.023,68,0.019,74,0.317,81,1.762,99,1.518,181,2.684,214,1.488,235,1.762,259,3.769,260,2.515,261,2.948,262,4.484]],["title/controllers/HealthController.html",[24,2.164,69,1.397]],["body/controllers/HealthController.html",[13,0.029,15,2.963,19,0.306,20,0.266,21,0.266,23,1.727,24,3.225,26,1.061,30,0.437,37,0.814,38,0.489,41,0.637,43,3.163,52,2.662,53,2.768,54,2.041,55,2.768,61,0.306,62,0.072,66,0.016,67,0.021,68,0.016,69,1.596,72,2.473,74,0.266,81,1.478,98,2.473,99,1.274,103,1.596,104,1.372,108,1.021,214,1.332,263,3.163,264,3.163,265,5.787,266,4.125,267,3.763,268,3.763,269,3.763,270,3.163,271,3.163,272,3.763,273,3.763,274,3.763,275,3.163,276,3.763,277,3.763]],["title/injectables/HealthService.html",[15,1.787,141,0.511]],["body/injectables/HealthService.html",[13,0.028,15,2.802,19,0.332,20,0.288,21,0.288,26,1.117,30,0.473,37,0.881,38,0.421,41,0.69,51,3.395,61,0.332,62,0.099,66,0.017,67,0.022,68,0.017,74,0.288,108,1.106,141,0.801,142,1.485,214,1.402,264,3.425,278,3.425,279,5.963,280,4.075,281,2.678,282,4.075,283,4.075,284,3.8,285,4.075,286,4.075,287,3.425,288,4.075,289,4.075,290,2.998,291,4.075]],["title/injectables/JwtStrategy.html",[118,1.958,141,0.511]],["body/injectables/JwtStrategy.html",[13,0.029,19,0.266,20,0.231,21,0.231,26,0.965,30,0.518,32,0.965,33,0.965,34,0.465,35,0.891,37,0.706,38,0.493,39,1.105,41,0.553,51,2.932,58,1.497,61,0.266,62,0.062,66,0.014,67,0.019,68,0.014,74,0.231,76,2.156,92,2.711,93,2.145,97,1.625,103,1.384,104,1.189,108,0.886,109,1.497,118,2.653,132,2.4,135,2.743,141,0.692,142,1.189,148,1.497,153,1.483,155,3.403,164,2.743,169,2.421,179,1.94,198,2.4,292,2.743,293,3.75,294,2.743,295,3.263,296,4.461,297,3.263,298,3.263,299,2.4,300,2.743,301,1.77,302,2.743,303,2.4,304,3.263,305,3.263,306,3.263,307,3.263,308,3.263,309,2.743]],["title/injectables/LocalStrategy.html",[119,1.958,141,0.511]],["body/injectables/LocalStrategy.html",[13,0.029,19,0.27,20,0.234,21,0.234,26,0.976,30,0.524,32,0.976,33,0.976,34,0.345,35,0.902,37,0.717,38,0.469,39,1.123,41,0.562,58,1.522,61,0.27,62,0.064,66,0.014,67,0.019,68,0.014,74,0.234,76,2.175,77,1.613,92,2.725,93,2.181,97,1.652,103,1.407,104,1.21,108,0.901,109,1.522,119,2.684,141,0.7,142,1.21,148,1.522,153,1.392,156,2.641,169,2.448,179,1.973,197,2.441,198,2.441,199,2.789,293,3.794,294,2.789,299,2.441,300,2.789,301,1.8,302,2.789,303,2.441,309,2.789,310,2.789,311,3.318,312,4.513,313,3.318,314,3.318,315,3.318,316,3.318,317,3.318,318,3.318]],["title/injectables/LogPipe.html",[52,1.787,141,0.511]],["body/injectables/LogPipe.html",[13,0.028,19,0.329,20,0.286,21,0.286,26,1.111,30,0.469,32,0.874,33,0.874,34,0.421,35,0.808,37,0.874,38,0.329,39,1.368,41,0.684,52,2.788,61,0.329,62,0.077,63,2.193,66,0.017,67,0.022,68,0.017,74,0.286,108,1.097,141,0.797,142,1.473,170,2.012,179,2.403,241,3.78,319,3.397,320,5.138,321,5.138,322,4.749,323,5.945,324,4.041,325,4.319,326,5.138,327,4.041,328,3.397]],["title/classes/Login.html",[62,0.063,77,1.036]],["body/classes/Login.html",[13,0.028,19,0.333,20,0.289,21,0.289,30,0.601,34,0.539,38,0.422,61,0.333,62,0.099,66,0.017,67,0.022,68,0.017,74,0.289,77,1.938,81,2.035,99,1.385,156,2.607,214,1.621,235,1.608,260,2.376,261,2.829,329,3.44,330,4.353,331,4.092,332,4.092,333,4.776,334,3.01]],["title/controllers/MeController.html",[69,1.397,335,2.164]],["body/controllers/MeController.html",[13,0.029,19,0.26,20,0.226,21,0.226,23,1.468,26,0.952,30,0.511,32,0.952,33,0.952,34,0.333,35,0.879,37,0.952,38,0.478,41,0.745,61,0.26,62,0.061,66,0.014,67,0.019,68,0.014,69,1.357,72,2.103,74,0.226,76,2.491,80,3.735,81,1.73,89,2.353,90,3.238,95,2.353,96,2.353,97,1.593,98,2.103,99,1.083,103,1.357,104,1.166,108,1.195,109,2.02,120,1.867,153,1.664,281,2.103,335,2.893,336,2.689,337,2.617,338,3.199,339,3.199,340,3.199,341,4.23,342,3.199,343,1.902,344,2.689,345,2.353,346,1.902,347,3.7,348,3.199,349,3.199,350,2.689,351,3.199,352,3.199,353,3.199,354,3.199]],["title/classes/Payload.html",[62,0.063,155,1.958]],["body/classes/Payload.html",[13,0.028,19,0.263,20,0.228,21,0.228,30,0.662,32,0.699,33,0.699,34,0.594,35,0.646,38,0.263,61,0.263,62,0.062,66,0.014,67,0.019,68,0.014,74,0.228,77,1.897,81,2.139,99,1.094,148,1.482,155,2.635,181,2.559,190,2.559,214,1.774,235,1.269,260,2.033,261,3.103,355,2.716,356,2.839,357,4.431,358,2.839,359,3.231,360,3.231,361,3.231,362,3.231,363,3.231,364,3.231,365,3.231,366,3.231,367,3.231]],["title/injectables/PerformanceInterceptor.html",[54,1.787,141,0.511]],["body/injectables/PerformanceInterceptor.html",[13,0.029,19,0.26,20,0.226,21,0.226,26,0.952,30,0.584,32,0.952,33,0.952,34,0.524,35,0.879,37,0.692,38,0.41,39,1.083,41,0.542,54,2.388,58,1.468,61,0.26,62,0.061,63,1.736,66,0.014,67,0.019,68,0.014,74,0.226,104,1.834,108,0.868,141,0.683,142,1.166,144,3.307,148,1.468,214,1.543,253,4.556,260,2.02,368,2.689,369,5.683,370,4.401,371,4.401,372,4.401,373,4.401,374,4.556,375,5.42,376,3.199,377,2.689,378,4.23,379,4.401,380,2.353,381,4.401,382,3.199,383,3.199,384,4.401,385,2.689,386,3.199,387,4.401,388,3.199,389,3.199,390,4.401,391,3.199,392,3.199]],["title/guards/RoleGuard.html",[393,2.423,394,2.164]],["body/guards/RoleGuard.html",[13,0.029,19,0.264,20,0.229,21,0.229,26,0.96,30,0.516,32,0.96,33,0.96,34,0.462,35,0.887,37,0.701,38,0.413,39,1.097,41,0.549,58,2.501,61,0.264,62,0.062,63,1.759,66,0.014,67,0.019,68,0.014,74,0.229,103,1.375,104,1.182,108,1.375,141,0.689,148,1.487,153,1.206,160,2.641,174,2.385,190,2.149,218,3.733,251,2.725,374,4.582,377,2.725,378,4.259,380,2.385,394,2.919,395,3.241,396,2.725,397,5.45,398,3.241,399,5.897,400,3.241,401,4.441,402,3.241,403,2.725,404,3.241,405,4.441,406,3.241,407,3.241,408,3.241,409,3.241,410,4.441,411,3.241]],["title/classes/SignUp.html",[62,0.063,78,1.958]],["body/classes/SignUp.html",[13,0.028,19,0.292,20,0.253,21,0.253,30,0.659,34,0.591,38,0.434,61,0.292,62,0.091,66,0.015,67,0.02,68,0.015,74,0.253,77,1.979,78,2.826,81,2.231,99,1.213,156,2.181,181,2.262,214,1.648,235,1.408,260,2.181,261,2.655,301,2.579,330,4.483,333,3.995,334,2.637,412,3.013,413,5.332,414,3.584,415,3.584,416,3.584,417,3.995,418,3.584,419,3.584,420,4.753]],["title/classes/Token.html",[62,0.063,167,2.164]],["body/classes/Token.html",[13,0.028,19,0.365,20,0.317,21,0.317,30,0.521,34,0.467,38,0.365,61,0.365,62,0.086,66,0.019,67,0.023,68,0.019,74,0.317,81,1.762,99,1.518,167,4.159,214,1.488,235,1.762,260,2.515,261,2.948,421,3.769,422,4.484]],["title/interfaces/User.html",[153,0.894,423,1.787]],["body/interfaces/User.html",[13,0.029,19,0.248,20,0.215,21,0.215,34,0.602,35,1.06,38,0.346,61,0.399,62,0.081,66,0.013,67,0.018,68,0.013,74,0.215,77,1.755,88,1.514,99,1.029,153,1.643,156,2.433,165,3.667,170,1.514,181,2.367,188,3.486,190,2.452,214,1.749,260,1.95,261,2.64,290,2.237,301,2.305,356,1.514,358,1.514,423,2.305,424,3.041,425,1.999,426,4.118,427,1.808,428,1.808,429,1.808,430,1.808,431,3.126,432,2.556,433,2.556,434,2.556,435,2.556,436,2.237,437,2.237,438,2.556,439,2.556,440,2.556,441,2.556,442,2.556,443,2.556]],["title/controllers/UserController.html",[69,1.397,444,2.164]],["body/controllers/UserController.html",[13,0.029,19,0.173,20,0.15,21,0.15,23,0.973,26,0.859,30,0.559,32,0.965,33,0.965,34,0.464,35,0.891,37,1.041,38,0.474,39,0.718,41,0.552,52,1.77,53,1.561,54,1.151,55,1.561,61,0.173,62,0.041,66,0.009,67,0.014,68,0.009,69,1.383,72,1.394,74,0.15,76,2.59,80,1.394,81,1.892,89,2.923,90,2.4,95,1.561,96,1.561,97,1.056,98,1.394,99,0.718,103,0.9,104,0.773,108,1.307,109,2.209,120,1.383,153,1.642,190,0.9,234,2.144,266,1.783,270,1.783,271,1.783,275,2.742,281,1.394,337,1.94,341,1.783,343,1.262,344,1.783,345,1.561,346,1.262,347,2.742,350,1.783,356,2.636,358,2.791,394,1.394,444,2.144,445,1.783,446,2.144,447,3.262,448,2.144,449,4.814,450,1.394,451,2.121,452,2.121,453,2.121,454,2.121,455,1.394,456,2.121,457,2.121,458,2.121,459,2.121,460,2.121,461,2.121,462,1.783,463,3.262,464,2.121,465,2.121,466,2.121,467,2.121,468,2.121,469,2.121,470,2.121,471,2.121,472,2.121,473,2.121,474,2.121,475,2.121,476,2.121,477,2.121,478,2.121,479,3.262,480,3.974,481,2.121,482,2.121,483,3.262,484,1.783,485,2.121,486,2.121,487,2.121,488,2.121,489,2.121,490,2.121,491,2.121,492,2.121,493,2.121,494,2.121,495,2.121,496,2.121,497,2.121]],["title/classes/UserDto.html",[62,0.063,88,1.64]],["body/classes/UserDto.html",[13,0.029,19,0.251,20,0.218,21,0.218,30,0.619,34,0.584,38,0.349,61,0.402,62,0.082,66,0.013,67,0.018,68,0.013,74,0.218,77,1.677,81,1.938,88,2.134,99,1.042,153,1.616,156,1.413,165,3.504,170,1.533,181,2.262,188,2.024,190,2.378,214,1.648,235,1.21,260,1.967,261,2.965,290,2.265,301,1.67,356,2.455,358,2.134,423,2.326,425,2.024,426,3.603,427,1.831,428,1.831,429,1.831,430,1.831,431,3.153,432,2.588,433,2.588,434,2.588,435,2.588,436,2.265,437,2.265,438,2.588,439,2.588,440,2.588,441,2.588,442,2.588,443,2.588,498,3.079,499,3.079,500,3.079,501,3.079]],["title/injectables/UserInMemoryRepository.html",[141,0.511,502,1.958]],["body/injectables/UserInMemoryRepository.html",[13,0.028,19,0.142,20,0.124,21,0.124,26,0.606,30,0.664,32,1.195,33,1.195,34,0.576,35,1.104,37,1.217,38,0.327,39,0.592,41,0.296,58,0.802,61,0.142,62,0.033,66,0.012,67,0.012,68,0.007,74,0.124,76,2.716,77,0.881,103,0.741,104,0.637,108,1.271,109,0.802,141,0.435,142,0.637,148,0.802,153,1.431,160,3.589,214,1.191,281,1.841,301,1.52,303,1.286,337,2.385,343,2.385,346,1.039,356,1.997,358,2.694,417,3.937,427,1.039,428,1.039,429,1.039,430,1.039,446,2.636,448,2.636,450,2.304,455,2.304,484,1.469,502,1.666,503,4.298,504,1.469,505,2.626,506,3.619,507,2.95,508,4.732,509,1.748,510,4.01,511,1.748,512,3.619,513,1.748,514,2.579,515,1.748,516,1.748,517,1.748,518,2.579,519,1.748,520,2.947,521,1.748,522,1.748,523,1.748,524,1.748,525,1.748,526,1.748,527,1.748,528,2.801,529,1.286,530,1.748,531,1.748,532,1.748,533,1.748,534,1.748,535,1.748,536,1.469,537,1.748,538,1.748,539,1.748,540,1.748,541,1.748,542,1.748,543,1.748,544,1.748,545,1.748,546,1.469,547,1.469,548,1.748,549,1.748,550,1.748,551,1.748]],["title/modules/UserModule.html",[0,1.397,14,1.64]],["body/modules/UserModule.html",[0,1.995,2,1.531,3,1.531,4,1.855,5,1.855,6,1.531,7,3.091,8,3.091,13,0.029,14,3.01,16,2.65,17,1.855,18,1.855,19,0.23,20,0.199,21,0.199,23,1.85,25,2.076,38,0.473,41,0.478,61,0.23,62,0.054,66,0.012,67,0.017,68,0.012,120,2.682,153,0.766,249,2.373,335,3.091,345,2.076,423,1.531,427,1.678,428,1.678,429,1.678,430,1.678,437,2.076,444,3.091,502,3.532,505,2.957,529,2.076,552,2.373,553,2.373,554,2.822,555,4.883,556,4.883,557,2.822,558,2.822,559,2.822,560,2.822,561,2.822,562,2.822,563,2.822,564,2.822,565,2.076,566,2.822,567,2.822,568,2.822,569,2.822]],["title/classes/UserRepository.html",[62,0.063,505,1.64]],["body/classes/UserRepository.html",[13,0.028,19,0.23,20,0.199,21,0.199,26,0.872,30,0.655,32,1.173,33,1.173,34,0.565,35,1.084,37,1.22,38,0.23,61,0.23,62,0.054,66,0.012,67,0.017,68,0.012,74,0.199,76,2.761,77,0.888,153,1.276,160,3.728,214,1.276,235,1.109,337,2.397,343,2.397,346,1.678,356,2.007,358,2.809,446,2.65,448,2.65,450,2.65,455,2.65,505,2.007,506,3.774,507,2.966,508,5.495,512,4.151,514,2.966,518,2.966,520,3.389,570,2.373,571,2.822,572,2.822,573,2.822,574,2.822,575,2.822,576,2.822]],["title/injectables/UserService.html",[120,1.397,141,0.511]],["body/injectables/UserService.html",[13,0.029,19,0.165,20,0.223,21,0.143,26,0.682,30,0.625,32,1.127,33,1.127,34,0.543,35,1.041,37,1.165,38,0.315,39,0.687,41,0.344,61,0.165,62,0.039,66,0.013,67,0.013,68,0.009,74,0.143,75,3.687,76,2.63,77,0.991,88,1.924,103,0.861,104,0.74,108,1.355,109,0.931,120,1.337,141,0.489,142,0.74,144,2.54,148,0.931,153,1.627,160,3.477,170,1.01,172,1.706,173,1.706,174,1.493,179,1.207,181,0.861,190,0.861,196,1.706,202,2.65,214,1.049,241,1.493,284,1.493,287,1.706,328,1.706,337,1.874,343,1.874,346,1.207,356,2.349,358,2.754,446,2.072,448,2.072,450,2.072,455,2.072,462,2.65,505,2.169,506,3.205,507,2.319,512,2.843,514,2.319,518,2.319,529,1.493,536,1.706,546,3.248,547,1.706,565,2.319,577,1.706,578,3.152,579,2.029,580,2.029,581,2.029,582,2.029,583,2.029,584,2.029,585,2.029,586,3.152,587,2.029,588,2.029,589,2.029,590,3.152,591,2.029,592,2.029,593,2.029,594,3.152,595,2.029,596,2.029,597,2.029,598,2.029,599,2.029,600,2.029,601,2.029,602,2.029]],["title/classes/Utils.html",[62,0.063,169,1.787]],["body/classes/Utils.html",[13,0.028,19,0.362,20,0.314,21,0.314,30,0.516,38,0.362,41,0.753,61,0.362,62,0.085,66,0.019,67,0.023,68,0.019,74,0.314,75,2.642,108,1.206,156,2.039,169,2.958,170,2.212,235,1.746,603,3.735,604,5.452,605,6.149,606,4.443,607,4.443,608,4.443,609,4.443,610,4.443]],["title/coverage.html",[611,3.303]],["body/coverage.html",[0,1.102,6,1.41,13,0.028,15,1.41,21,0.184,22,1.912,24,1.708,34,0.271,52,1.41,54,1.41,56,1.708,59,1.912,62,0.113,66,0.011,67,0.016,68,0.011,69,2.094,70,1.708,71,2.184,77,0.817,78,1.545,88,1.294,92,1.192,117,1.41,118,1.545,119,1.545,120,1.102,141,0.934,143,2.184,153,0.705,155,1.545,167,1.708,169,1.41,170,1.294,181,1.102,190,1.102,209,2.184,234,1.708,236,2.184,237,2.184,248,2.184,256,3.192,259,2.184,263,2.184,278,2.184,292,2.184,310,2.184,319,2.184,329,2.184,335,1.708,336,2.184,355,2.184,368,2.184,393,1.912,394,1.708,396,2.184,412,2.184,421,2.184,423,1.41,425,2.496,444,1.708,445,2.184,502,1.545,503,2.184,504,2.184,505,1.294,570,2.184,577,2.184,603,2.184,611,1.912,612,2.598,613,2.598,614,2.598,615,4.488,616,6.671,617,5.485,618,5.485,619,3.798,620,3.798,621,5.665,622,4.488,623,3.798,624,2.184,625,3.302,626,2.184,627,2.598,628,2.598,629,2.598,630,2.598]],["title/dependencies.html",[3,2.148,631,2.752]],["body/dependencies.html",[3,2.011,13,0.029,41,0.628,47,2.726,48,4.084,62,0.093,66,0.016,67,0.021,68,0.016,97,1.845,99,1.255,123,2.726,132,2.726,197,2.726,299,3.988,322,3.115,334,2.726,380,2.726,403,3.115,427,2.204,428,2.204,429,2.204,430,2.204,436,2.726,632,3.706,633,5.421,634,3.706,635,3.706,636,3.706,637,4.859,638,3.706,639,2.726,640,3.706,641,3.706,642,4.859,643,3.706,644,3.706,645,3.706,646,3.706,647,3.706,648,3.706,649,3.706,650,3.706,651,3.706,652,3.706,653,3.706,654,3.706,655,3.706,656,3.706,657,3.706,658,3.706,659,3.706,660,3.706]],["title/miscellaneous/functions.html",[661,1.493,662,3.328]],["body/miscellaneous/functions.html",[6,3.313,13,0.026,32,1.041,33,1.041,35,0.962,66,0.02,67,0.024,68,0.02,74,0.34,625,3.541,626,4.81,639,3.541,661,2.611,662,4.046,663,4.81,664,4.813]],["title/index.html",[74,0.194,385,2.314,665,2.752]],["body/index.html",[13,0.028,20,0.232,47,3.753,66,0.014,67,0.019,68,0.014,284,2.416,565,2.416,611,2.416,639,2.416,666,4.482,667,3.285,668,5.102,669,3.285,670,3.285,671,3.285,672,5.481,673,3.285,674,3.285,675,3.285,676,3.285,677,3.285,678,3.285,679,3.285,680,3.285,681,3.285,682,3.285,683,3.285,684,3.285,685,3.285,686,6.059,687,3.285,688,3.285,689,5.92,690,3.285,691,3.285,692,4.482,693,3.285,694,3.285,695,3.285,696,3.285,697,4.482,698,4.482,699,3.285,700,3.285,701,3.285,702,5.102,703,5.102,704,3.285,705,3.285,706,3.285,707,3.285,708,3.285,709,2.761,710,3.285,711,3.285,712,3.285,713,3.285,714,3.285,715,3.285,716,3.285,717,3.285,718,3.285,719,3.285,720,4.482,721,3.285,722,3.285,723,3.285,724,3.285,725,4.482,726,3.285,727,3.285,728,3.285,729,3.285,730,3.285]],["title/modules.html",[2,2.436]],["body/modules.html",[1,3.179,2,2.624,12,2.624,13,0.024,14,2.408,66,0.021,67,0.024,68,0.021,709,5.143,731,6.118,732,6.118,733,6.118]],["title/overview.html",[734,3.774]],["body/overview.html",[0,1.322,1,4.004,2,1.692,3,1.692,4,2.049,5,2.049,6,1.692,7,2.049,8,2.049,9,2.621,10,2.621,11,2.621,12,3.546,13,0.028,14,3.033,15,2.693,16,2.842,17,2.049,18,2.049,23,1.431,66,0.013,67,0.018,68,0.013,92,2.742,113,2.621,115,2.621,116,2.621,117,2.693,118,2.952,119,2.952,120,2.584,142,1.137,235,1.225,393,2.294,423,1.692,502,3.188,505,2.669,552,2.621,553,2.621,555,4.507,556,4.507,734,2.621,735,3.118,736,3.118,737,3.118,738,3.118,739,4.324]],["title/miscellaneous/typealiases.html",[661,1.493,740,3.959]],["body/miscellaneous/typealiases.html",[13,0.026,34,0.516,66,0.021,67,0.025,68,0.021,74,0.35,153,1.346,165,3.827,425,3.259,431,3.648,661,2.691,741,4.959,742,4.959]],["title/miscellaneous/variables.html",[661,1.493,743,3.328]],["body/miscellaneous/variables.html",[0,2.306,12,2.4,13,0.028,14,2.202,22,3.254,34,0.566,59,4,66,0.019,67,0.023,68,0.019,74,0.313,190,2.604,214,1.201,325,4.57,624,3.718,625,3.254,661,2.4,663,3.718,743,3.718,744,4.423,745,4.423,746,5.437,747,4.423]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":616,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["0.11.0",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":617,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":627,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":620,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":623,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":622,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":628,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":739,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["1.1.4",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["1.8.3",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":737,"title":{},"body":{"overview.html":{}}}],["1024",{"_index":231,"title":{},"body":{"injectables/CryptoService.html":{}}}],["180",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{}}}],["3",{"_index":735,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["3.2.1",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["32",{"_index":232,"title":{},"body":{"injectables/CryptoService.html":{}}}],["4",{"_index":736,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":328,"title":{},"body":{"injectables/LogPipe.html":{},"injectables/UserService.html":{}}}],["6.0.0",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["6.1.0",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["6.5.3",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["6.7.2",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["8.2.0",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":738,"title":{},"body":{"overview.html":{}}}],["abstract",{"_index":508,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{}}}],["accessors",{"_index":604,"title":{},"body":{"classes/Utils.html":{}}}],["addons/in",{"_index":428,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["admin",{"_index":431,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{},"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":741,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":710,"title":{},"body":{"index.html":{}}}],["angular",{"_index":681,"title":{},"body":{"index.html":{}}}],["api",{"_index":284,"title":{},"body":{"injectables/HealthService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["apibearerauth",{"_index":347,"title":{},"body":{"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["apimodelproperty",{"_index":261,"title":{},"body":{"classes/Email.html":{},"classes/Login.html":{},"classes/Payload.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"classes/UserDto.html":{}}}],["apiusetags",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["apiusetags('auth",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiusetags('health",{"_index":272,"title":{},"body":{"controllers/HealthController.html":{}}}],["apiusetags('me",{"_index":348,"title":{},"body":{"controllers/MeController.html":{}}}],["apiusetags('user",{"_index":470,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":639,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["applications",{"_index":678,"title":{},"body":{"index.html":{}}}],["apply(custommiddleware",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":323,"title":{},"body":{"injectables/LogPipe.html":{}}}],["argumentshost",{"_index":243,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["async",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["auth.controller",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":70,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["authmodule",{"_index":12,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["author",{"_index":720,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":92,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{}}}],["backend",{"_index":667,"title":{},"body":{"index.html":{}}}],["backers",{"_index":711,"title":{},"body":{"index.html":{}}}],["base",{"_index":432,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["based",{"_index":669,"title":{},"body":{"index.html":{}}}],["basic",{"_index":283,"title":{},"body":{"injectables/HealthService.html":{}}}],["body",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":218,"title":{},"body":{"injectables/CryptoService.html":{},"guards/RoleGuard.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":733,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":731,"title":{},"body":{"modules.html":{}}}],["building",{"_index":673,"title":{},"body":{"index.html":{}}}],["called",{"_index":483,"title":{},"body":{"controllers/UserController.html":{}}}],["callhandler",{"_index":375,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["canactivate",{"_index":397,"title":{},"body":{"guards/RoleGuard.html":{}}}],["canactivate(context",{"_index":401,"title":{},"body":{"guards/RoleGuard.html":{}}}],["candidatepassword",{"_index":215,"title":{},"body":{"injectables/CryptoService.html":{}}}],["catch",{"_index":239,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["catch(err",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["catch(exception",{"_index":240,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["catch(httpexception",{"_index":246,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["checkpassword",{"_index":210,"title":{},"body":{"injectables/CryptoService.html":{}}}],["checkpassword(originalhash",{"_index":213,"title":{},"body":{"injectables/CryptoService.html":{}}}],["class",{"_index":62,"title":{"classes/CustomExceptionFilter.html":{},"classes/Email.html":{},"classes/Login.html":{},"classes/Payload.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"classes/Utils.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":235,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/Email.html":{},"classes/Login.html":{},"classes/Payload.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"classes/UserDto.html":{},"classes/UserRepository.html":{},"classes/Utils.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":552,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":553,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":554,"title":{},"body":{"modules/UserModule.html":{}}}],["completed",{"_index":390,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["compression",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{}}}],["config.api.version",{"_index":291,"title":{},"body":{"injectables/HealthService.html":{}}}],["config.auth.jwt.secret",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["config.auth.jwt.ttl",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{}}}],["configure",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmpassword",{"_index":413,"title":{},"body":{"classes/SignUp.html":{}}}],["const",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/UserInMemoryRepository.html":{}}}],["constructor",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":294,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["constructor(id",{"_index":357,"title":{},"body":{"classes/Payload.html":{}}}],["constructor(private",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{}}}],["constructor(reflector",{"_index":398,"title":{},"body":{"guards/RoleGuard.html":{}}}],["constructor(repository",{"_index":579,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(requesttag",{"_index":371,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["constructor(service",{"_index":509,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["constructor(userservice",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["consumer",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["context",{"_index":377,"title":{},"body":{"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{}}}],["context.gethandler",{"_index":407,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":408,"title":{},"body":{"guards/RoleGuard.html":{}}}],["controller",{"_index":69,"title":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('health",{"_index":273,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('me",{"_index":349,"title":{},"body":{"controllers/MeController.html":{}}}],["controller('user",{"_index":471,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/HealthController.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["core/filters/custom",{"_index":468,"title":{},"body":{"controllers/UserController.html":{}}}],["core/guards/role.decorator",{"_index":466,"title":{},"body":{"controllers/UserController.html":{}}}],["core/guards/role.guard",{"_index":467,"title":{},"body":{"controllers/UserController.html":{}}}],["core/interceptors/performance.interceptor",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["core/middleware/custom.middleware",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["core/pipes/log.pipe",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["correct",{"_index":568,"title":{},"body":{"modules/UserModule.html":{}}}],["coverage",{"_index":611,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":446,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":485,"title":{},"body":{"controllers/UserController.html":{}}}],["create(user",{"_index":450,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["created",{"_index":536,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{}}}],["crypto",{"_index":226,"title":{},"body":{"injectables/CryptoService.html":{}}}],["crypto.service",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["cryptoservice",{"_index":117,"title":{"injectables/CryptoService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"coverage.html":{},"overview.html":{}}}],["customexceptionfilter",{"_index":234,"title":{"classes/CustomExceptionFilter.html":{}},"body":{"classes/CustomExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["customexceptionfilter())@get(':id",{"_index":458,"title":{},"body":{"controllers/UserController.html":{}}}],["custommiddleware",{"_index":56,"title":{"injectables/CustomMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/CustomMiddleware.html":{},"coverage.html":{}}}],["data",{"_index":598,"title":{},"body":{"injectables/UserService.html":{}}}],["date.now",{"_index":387,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["db",{"_index":430,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"classes/Email.html":{},"controllers/HealthController.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{}}}],["default",{"_index":746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{}}}],["delete",{"_index":343,"title":{},"body":{"controllers/MeController.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":495,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(id",{"_index":514,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["deletebyid",{"_index":447,"title":{},"body":{"controllers/UserController.html":{}}}],["deletebyid(@param",{"_index":496,"title":{},"body":{"controllers/UserController.html":{}}}],["deletebyid(id",{"_index":452,"title":{},"body":{"controllers/UserController.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":682,"title":{},"body":{"index.html":{}}}],["development",{"_index":688,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["duplicates",{"_index":438,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["e2e",{"_index":699,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":674,"title":{},"body":{"index.html":{}}}],["email",{"_index":181,"title":{"classes/Email.html":{}},"body":{"injectables/AuthService.html":{},"classes/Email.html":{},"classes/Payload.html":{},"classes/SignUp.html":{},"interfaces/User.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["enable",{"_index":567,"title":{},"body":{"modules/UserModule.html":{}}}],["entity",{"_index":433,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["error('user",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["exception",{"_index":245,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["exception.filter",{"_index":469,"title":{},"body":{"controllers/UserController.html":{}}}],["exception.filter.ts",{"_index":237,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:5",{"_index":244,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["exceptionfilter",{"_index":238,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["executioncontext",{"_index":374,"title":{},"body":{"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{}}}],["existinguser",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguser.id",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":301,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/SignUp.html":{},"interfaces/User.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{}}}],["extractjwt",{"_index":298,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":305,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":317,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["featured_modules",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["features",{"_index":439,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{},"coverage.html":{}}}],["fine",{"_index":289,"title":{},"body":{"injectables/HealthService.html":{}}}],["forroutes('user",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["framework",{"_index":672,"title":{},"body":{"index.html":{}}}],["function",{"_index":256,"title":{},"body":{"injectables/CustomMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":662,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":489,"title":{},"body":{"controllers/UserController.html":{}}}],["get('list",{"_index":481,"title":{},"body":{"controllers/UserController.html":{}}}],["get('status",{"_index":276,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(@req",{"_index":351,"title":{},"body":{"controllers/MeController.html":{}}}],["get(req",{"_index":338,"title":{},"body":{"controllers/MeController.html":{}}}],["getall",{"_index":506,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["getbyid",{"_index":448,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["getbyid(@param",{"_index":490,"title":{},"body":{"controllers/UserController.html":{}}}],["getbyid(id",{"_index":455,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["getbylogin",{"_index":507,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["getbylogin(login",{"_index":518,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["gethash",{"_index":211,"title":{},"body":{"injectables/CryptoService.html":{}}}],["gethash(password",{"_index":219,"title":{},"body":{"injectables/CryptoService.html":{}}}],["gethello",{"_index":265,"title":{},"body":{"controllers/HealthController.html":{}}}],["getstatus",{"_index":279,"title":{},"body":{"injectables/HealthService.html":{}}}],["getting",{"_index":665,"title":{"index.html":{}},"body":{}}],["gettokenpayload",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokenpayload(user",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["getunauthorizedexception",{"_index":606,"title":{},"body":{"classes/Utils.html":{}}}],["grow",{"_index":706,"title":{},"body":{"index.html":{}}}],["guard",{"_index":393,"title":{"guards/RoleGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":395,"title":{},"body":{"guards/RoleGuard.html":{}}}],["handle",{"_index":388,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["hash",{"_index":223,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashpassword",{"_index":212,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hashpassword(password",{"_index":221,"title":{},"body":{"injectables/CryptoService.html":{}}}],["hasrole",{"_index":410,"title":{},"body":{"guards/RoleGuard.html":{}}}],["health",{"_index":264,"title":{},"body":{"controllers/HealthController.html":{},"injectables/HealthService.html":{}}}],["health.controller",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["health.service",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":24,"title":{"controllers/HealthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"coverage.html":{}}}],["healthservice",{"_index":15,"title":{"injectables/HealthService.html":{}},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"coverage.html":{},"overview.html":{}}}],["heavily",{"_index":679,"title":{},"body":{"index.html":{}}}],["here",{"_index":717,"title":{},"body":{"index.html":{}}}],["hit",{"_index":476,"title":{},"body":{"controllers/UserController.html":{}}}],["host",{"_index":242,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["httpexception",{"_index":241,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"injectables/LogPipe.html":{},"injectables/UserService.html":{}}}],["httpexception('user",{"_index":602,"title":{},"body":{"injectables/UserService.html":{}}}],["https://nestjs.com",{"_index":724,"title":{},"body":{"index.html":{}}}],["id",{"_index":356,"title":{},"body":{"classes/Payload.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":613,"title":{},"body":{"coverage.html":{}}}],["implementation",{"_index":564,"title":{},"body":{"modules/UserModule.html":{}}}],["implements",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"injectables/LogPipe.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{}}}],["import",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{}}}],["imports",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":74,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{}}}],["inherited",{"_index":417,"title":{},"body":{"classes/SignUp.html":{},"injectables/UserInMemoryRepository.html":{}}}],["initialized",{"_index":532,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["initswagger",{"_index":626,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["initswagger(app",{"_index":664,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectable",{"_index":141,"title":{"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"injectables/CustomMiddleware.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"injectables/CustomMiddleware.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"injectables/CustomMiddleware.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["inmemory.repository",{"_index":559,"title":{},"body":{"modules/UserModule.html":{}}}],["inmemory.repository.ts",{"_index":504,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"coverage.html":{}}}],["inmemory.repository.ts:15",{"_index":513,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["inmemory.repository.ts:25",{"_index":515,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["inmemory.repository.ts:29",{"_index":516,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["inmemory.repository.ts:33",{"_index":519,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["inmemory.repository.ts:40",{"_index":517,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["inmemory.repository.ts:44",{"_index":521,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["inmemory.repository.ts:9",{"_index":511,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["inmemorydb",{"_index":435,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["inmemorydbentity",{"_index":426,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["inmemorydbmodule",{"_index":561,"title":{},"body":{"modules/UserModule.html":{}}}],["inmemorydbmodule.forroot",{"_index":562,"title":{},"body":{"modules/UserModule.html":{}}}],["inmemorydbservice",{"_index":510,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["inspired",{"_index":680,"title":{},"body":{"index.html":{}}}],["installation",{"_index":685,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":687,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":370,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["intercept(context",{"_index":373,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["interface",{"_index":423,"title":{"interfaces/User.html":{}},"body":{"interfaces/User.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":424,"title":{},"body":{"interfaces/User.html":{}}}],["interfaces/login",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["interfaces/payload",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["interfaces/signup",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["interfaces/token",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["internal",{"_index":595,"title":{},"body":{"injectables/UserService.html":{}}}],["isemail",{"_index":420,"title":{},"body":{"classes/SignUp.html":{}}}],["isemail()@apimodelproperty",{"_index":415,"title":{},"body":{"classes/SignUp.html":{}}}],["isnotempty",{"_index":333,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{}}}],["isnotempty()@apimodelproperty",{"_index":330,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{}}}],["join",{"_index":713,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":304,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":118,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":721,"title":{},"body":{"index.html":{}}}],["kononov",{"_index":728,"title":{},"body":{"index.html":{}}}],["last",{"_index":474,"title":{},"body":{"controllers/UserController.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":730,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":703,"title":{},"body":{"index.html":{}}}],["list",{"_index":449,"title":{},"body":{"controllers/UserController.html":{}}}],["local",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localstrategy",{"_index":119,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["logconfig",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["logger",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{}}}],["logger.debug('exception",{"_index":247,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["logger.debug('getbyid",{"_index":491,"title":{},"body":{"controllers/UserController.html":{}}}],["logger.debug('guard",{"_index":404,"title":{},"body":{"guards/RoleGuard.html":{}}}],["logger.debug('interceptor",{"_index":384,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["logger.debug('list",{"_index":482,"title":{},"body":{"controllers/UserController.html":{}}}],["logger.debug('login",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["logger.debug('middleware",{"_index":258,"title":{},"body":{"injectables/CustomMiddleware.html":{}}}],["logger.debug('pipe",{"_index":327,"title":{},"body":{"injectables/LogPipe.html":{}}}],["logger.debug('user",{"_index":535,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["logger.debug('userinmemoryrepository",{"_index":531,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["logger.debug('validate",{"_index":307,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["logger.debug(user",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger.debug(users",{"_index":538,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["logger.log(`${this.requesttag",{"_index":391,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["login",{"_index":77,"title":{"classes/Login.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Payload.html":{},"classes/SignUp.html":{},"interfaces/User.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["login(@body",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(login",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login.tolocalelowercase",{"_index":544,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["login:11",{"_index":419,"title":{},"body":{"classes/SignUp.html":{}}}],["login:7",{"_index":418,"title":{},"body":{"classes/SignUp.html":{}}}],["logpipe",{"_index":52,"title":{"injectables/LogPipe.html":{}},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"injectables/LogPipe.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["logpipe())@get('status",{"_index":268,"title":{},"body":{"controllers/HealthController.html":{}}}],["logpipe())@useguards(roleguard)@useinterceptors(new",{"_index":456,"title":{},"body":{"controllers/UserController.html":{}}}],["mapusertodto",{"_index":578,"title":{},"body":{"injectables/UserService.html":{}}}],["mapusertodto(user",{"_index":586,"title":{},"body":{"injectables/UserService.html":{}}}],["matching",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matters",{"_index":473,"title":{},"body":{"controllers/UserController.html":{}}}],["me.controller",{"_index":560,"title":{},"body":{"modules/UserModule.html":{}}}],["mecontroller",{"_index":335,"title":{"controllers/MeController.html":{}},"body":{"controllers/MeController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["memory",{"_index":429,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["metadata",{"_index":322,"title":{},"body":{"injectables/LogPipe.html":{},"dependencies.html":{}}}],["methods",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"controllers/MeController.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["middlewareconsumer",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["miscellaneous",{"_index":661,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":702,"title":{},"body":{"index.html":{}}}],["mode",{"_index":692,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":716,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":722,"title":{},"body":{"index.html":{}}}],["name",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":440,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["needs",{"_index":566,"title":{},"body":{"modules/UserModule.html":{}}}],["nest",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"index.html":{}}}],["nest/swagger",{"_index":442,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["nester",{"_index":666,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":726,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":379,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["nestjs",{"_index":427,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"controllers/MeController.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/Utils.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":403,"title":{},"body":{"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"classes/Email.html":{},"controllers/HealthController.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":257,"title":{},"body":{"injectables/CustomMiddleware.html":{}}}],["nestmodule",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["never",{"_index":475,"title":{},"body":{"controllers/UserController.html":{}}}],["new",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LogPipe.html":{},"interfaces/User.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"classes/Utils.html":{},"coverage.html":{}}}],["next",{"_index":253,"title":{},"body":{"injectables/CustomMiddleware.html":{},"injectables/PerformanceInterceptor.html":{}}}],["node.js",{"_index":671,"title":{},"body":{"index.html":{}}}],["now",{"_index":386,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["now}ms",{"_index":392,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["npm",{"_index":686,"title":{},"body":{"index.html":{}}}],["number",{"_index":358,"title":{},"body":{"classes/Payload.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["object",{"_index":597,"title":{},"body":{"injectables/UserService.html":{}}}],["observable",{"_index":378,"title":{},"body":{"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{}}}],["open",{"_index":704,"title":{},"body":{"index.html":{}}}],["optional",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":472,"title":{},"body":{"controllers/UserController.html":{}}}],["originalhash",{"_index":217,"title":{},"body":{"injectables/CryptoService.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["outside",{"_index":569,"title":{},"body":{"modules/UserModule.html":{}}}],["overview",{"_index":734,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwritten",{"_index":478,"title":{},"body":{"controllers/UserController.html":{}}}],["package",{"_index":631,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":344,"title":{},"body":{"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["partial",{"_index":512,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["particular",{"_index":563,"title":{},"body":{"modules/UserModule.html":{}}}],["passport",{"_index":299,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passport/jwt.strategy",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{}}}],["passport/local.strategy",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":300,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":302,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":316,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["password",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/SignUp.html":{},"interfaces/User.html":{},"classes/UserDto.html":{},"classes/Utils.html":{}}}],["password.hash",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["password.salt",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordfield",{"_index":315,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["path",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["payload",{"_index":155,"title":{"classes/Payload.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Payload.html":{},"coverage.html":{}}}],["payload(user.id",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["pbkdf2sync",{"_index":224,"title":{},"body":{"injectables/CryptoService.html":{}}}],["pbkdf2sync(password",{"_index":230,"title":{},"body":{"injectables/CryptoService.html":{}}}],["performanceinterceptor",{"_index":54,"title":{"injectables/PerformanceInterceptor.html":{}},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"injectables/PerformanceInterceptor.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["performanceinterceptor('getbyid",{"_index":487,"title":{},"body":{"controllers/UserController.html":{}}}],["performanceinterceptor('status",{"_index":274,"title":{},"body":{"controllers/HealthController.html":{}}}],["performanceinterceptor())@usefilters(new",{"_index":457,"title":{},"body":{"controllers/UserController.html":{}}}],["performanceinterceptor())@usepipes(new",{"_index":267,"title":{},"body":{"controllers/HealthController.html":{}}}],["pipe",{"_index":389,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["pipetransform",{"_index":326,"title":{},"body":{"injectables/LogPipe.html":{}}}],["please",{"_index":714,"title":{},"body":{"index.html":{}}}],["post",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["post('login",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@useguards(undefined",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('sign",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["private",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"injectables/PerformanceInterceptor.html":{},"injectables/UserService.html":{}}}],["privatekey",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{}}}],["production",{"_index":694,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":670,"title":{},"body":{"index.html":{}}}],["project",{"_index":705,"title":{},"body":{"index.html":{}}}],["promise",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"guards/RoleGuard.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["promise.reject(err",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["promise.reject(utils.unauthorizedexception",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["promise.resolve(user",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":260,"title":{},"body":{"classes/Email.html":{},"classes/Login.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"classes/UserDto.html":{}}}],["provide",{"_index":555,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["provides",{"_index":282,"title":{},"body":{"injectables/HealthService.html":{}}}],["public",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"injectables/UserService.html":{},"classes/Utils.html":{}}}],["purposes",{"_index":287,"title":{},"body":{"injectables/HealthService.html":{},"injectables/UserService.html":{}}}],["put",{"_index":341,"title":{},"body":{"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["put(':id",{"_index":463,"title":{},"body":{"controllers/UserController.html":{}}}],["randombytes",{"_index":225,"title":{},"body":{"injectables/CryptoService.html":{}}}],["randombytes(32).tostring('hex",{"_index":227,"title":{},"body":{"injectables/CryptoService.html":{}}}],["read",{"_index":715,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{}}}],["reflect",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":399,"title":{},"body":{"guards/RoleGuard.html":{}}}],["released",{"_index":443,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["repository",{"_index":565,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CustomMiddleware.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["request",{"_index":251,"title":{},"body":{"injectables/CustomMiddleware.html":{},"guards/RoleGuard.html":{}}}],["request.user",{"_index":409,"title":{},"body":{"guards/RoleGuard.html":{}}}],["requesttag",{"_index":369,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["res",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CustomMiddleware.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":252,"title":{},"body":{"injectables/CustomMiddleware.html":{}}}],["result",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.length",{"_index":547,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{}}}],["result.map(user",{"_index":593,"title":{},"body":{"injectables/UserService.html":{}}}],["result[0",{"_index":548,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["results",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"controllers/MeController.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{}}}],["returns",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"controllers/MeController.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"classes/Payload.html":{},"guards/RoleGuard.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["role('admin",{"_index":479,"title":{},"body":{"controllers/UserController.html":{}}}],["role('admin')@delete(':id",{"_index":453,"title":{},"body":{"controllers/UserController.html":{}}}],["role('admin')@useguards(roleguard)@get('list",{"_index":460,"title":{},"body":{"controllers/UserController.html":{}}}],["roleguard",{"_index":394,"title":{"guards/RoleGuard.html":{}},"body":{"guards/RoleGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["root",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["rule",{"_index":477,"title":{},"body":{"controllers/UserController.html":{}}}],["run",{"_index":689,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":380,"title":{},"body":{"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":382,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["salt",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"interfaces/User.html":{},"classes/UserDto.html":{}}}],["scalable",{"_index":675,"title":{},"body":{"index.html":{}}}],["scope",{"_index":528,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["scope.default",{"_index":530,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["secret",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":306,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":676,"title":{},"body":{"index.html":{}}}],["service",{"_index":281,"title":{},"body":{"injectables/HealthService.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{}}}],["setmetadata('role",{"_index":747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sha512').tostring('hex",{"_index":233,"title":{},"body":{"injectables/CryptoService.html":{}}}],["side",{"_index":677,"title":{},"body":{"index.html":{}}}],["signin",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(user",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":78,"title":{"classes/SignUp.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignUp.html":{},"coverage.html":{}}}],["signup(@body",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(userdto",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"classes/Utils.html":{},"index.html":{}}}],["sponsors",{"_index":708,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":663,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../role.decorator.ts",{"_index":745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.interface.ts",{"_index":742,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.module.ts",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts:30",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:16",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:19",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:23",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:47",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:52",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:57",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/crypto.service.ts",{"_index":209,"title":{},"body":{"injectables/CryptoService.html":{},"coverage.html":{}}}],["src/auth/crypto.service.ts:12",{"_index":216,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/auth/crypto.service.ts:17",{"_index":220,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/auth/crypto.service.ts:6",{"_index":222,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/auth/interfaces/email.ts",{"_index":259,"title":{},"body":{"classes/Email.html":{},"coverage.html":{}}}],["src/auth/interfaces/email.ts:5",{"_index":262,"title":{},"body":{"classes/Email.html":{}}}],["src/auth/interfaces/login.ts",{"_index":329,"title":{},"body":{"classes/Login.html":{},"coverage.html":{}}}],["src/auth/interfaces/login.ts:11",{"_index":332,"title":{},"body":{"classes/Login.html":{}}}],["src/auth/interfaces/login.ts:7",{"_index":331,"title":{},"body":{"classes/Login.html":{}}}],["src/auth/interfaces/payload.ts",{"_index":355,"title":{},"body":{"classes/Payload.html":{},"coverage.html":{}}}],["src/auth/interfaces/payload.ts:13",{"_index":361,"title":{},"body":{"classes/Payload.html":{}}}],["src/auth/interfaces/payload.ts:16",{"_index":362,"title":{},"body":{"classes/Payload.html":{}}}],["src/auth/interfaces/payload.ts:19",{"_index":360,"title":{},"body":{"classes/Payload.html":{}}}],["src/auth/interfaces/payload.ts:22",{"_index":363,"title":{},"body":{"classes/Payload.html":{}}}],["src/auth/interfaces/payload.ts:3",{"_index":359,"title":{},"body":{"classes/Payload.html":{}}}],["src/auth/interfaces/signup.ts",{"_index":412,"title":{},"body":{"classes/SignUp.html":{},"coverage.html":{}}}],["src/auth/interfaces/signup.ts:12",{"_index":414,"title":{},"body":{"classes/SignUp.html":{}}}],["src/auth/interfaces/signup.ts:8",{"_index":416,"title":{},"body":{"classes/SignUp.html":{}}}],["src/auth/interfaces/token.ts",{"_index":421,"title":{},"body":{"classes/Token.html":{},"coverage.html":{}}}],["src/auth/interfaces/token.ts:5",{"_index":422,"title":{},"body":{"classes/Token.html":{}}}],["src/auth/passport/jwt.strategy.ts",{"_index":292,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/passport/jwt.strategy.ts:10",{"_index":295,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/passport/jwt.strategy.ts:18",{"_index":297,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/passport/local.strategy.ts",{"_index":310,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/passport/local.strategy.ts:17",{"_index":313,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/passport/local.strategy.ts:8",{"_index":311,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/utils.ts",{"_index":603,"title":{},"body":{"classes/Utils.html":{},"coverage.html":{}}}],["src/auth/utils.ts:4",{"_index":607,"title":{},"body":{"classes/Utils.html":{}}}],["src/core/filters/custom",{"_index":236,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"coverage.html":{}}}],["src/core/guards/role.decorator.ts",{"_index":624,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/guards/role.guard.ts",{"_index":396,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/core/guards/role.guard.ts:10",{"_index":402,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/core/guards/role.guard.ts:6",{"_index":400,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/core/interceptors/performance.interceptor.ts",{"_index":368,"title":{},"body":{"injectables/PerformanceInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/performance.interceptor.ts:14",{"_index":376,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["src/core/interceptors/performance.interceptor.ts:8",{"_index":372,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["src/core/middleware/custom.middleware.ts",{"_index":248,"title":{},"body":{"injectables/CustomMiddleware.html":{},"coverage.html":{}}}],["src/core/middleware/custom.middleware.ts:5",{"_index":255,"title":{},"body":{"injectables/CustomMiddleware.html":{}}}],["src/core/pipes/log.pipe.ts",{"_index":319,"title":{},"body":{"injectables/LogPipe.html":{},"coverage.html":{}}}],["src/core/pipes/log.pipe.ts:5",{"_index":324,"title":{},"body":{"injectables/LogPipe.html":{}}}],["src/health.controller.ts",{"_index":263,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health.controller.ts:15",{"_index":269,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health.service.ts",{"_index":278,"title":{},"body":{"injectables/HealthService.html":{},"coverage.html":{}}}],["src/health.service.ts:9",{"_index":280,"title":{},"body":{"injectables/HealthService.html":{}}}],["src/main.ts",{"_index":625,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/user/me.controller.ts",{"_index":336,"title":{},"body":{"controllers/MeController.html":{},"coverage.html":{}}}],["src/user/me.controller.ts:16",{"_index":339,"title":{},"body":{"controllers/MeController.html":{}}}],["src/user/me.controller.ts:21",{"_index":342,"title":{},"body":{"controllers/MeController.html":{}}}],["src/user/user",{"_index":503,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":445,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:25",{"_index":461,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:31",{"_index":451,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:40",{"_index":459,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:46",{"_index":464,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:53",{"_index":454,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.interface.ts",{"_index":425,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/user/user.interface.ts:25",{"_index":499,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/user.interface.ts:28",{"_index":500,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/user.interface.ts:31",{"_index":498,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/user.interface.ts:34",{"_index":501,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/user.module.ts",{"_index":557,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.repository.ts",{"_index":570,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/user/user.repository.ts:4",{"_index":571,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/user.repository.ts:5",{"_index":576,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/user.repository.ts:6",{"_index":572,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/user.repository.ts:7",{"_index":573,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/user.repository.ts:8",{"_index":574,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/user.repository.ts:9",{"_index":575,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/user.service.ts",{"_index":577,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:10",{"_index":581,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:15",{"_index":584,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:20",{"_index":583,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:28",{"_index":585,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:32",{"_index":588,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:38",{"_index":582,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:42",{"_index":587,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:6",{"_index":580,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":690,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":693,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":695,"title":{},"body":{"index.html":{}}}],["started",{"_index":385,"title":{"index.html":{}},"body":{"injectables/PerformanceInterceptor.html":{}}}],["starter",{"_index":684,"title":{},"body":{"index.html":{}}}],["statements",{"_index":614,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":608,"title":{},"body":{"classes/Utils.html":{}}}],["status",{"_index":285,"title":{},"body":{"injectables/HealthService.html":{}}}],["stay",{"_index":718,"title":{},"body":{"index.html":{}}}],["stored",{"_index":434,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["straight",{"_index":596,"title":{},"body":{"injectables/UserService.html":{}}}],["strategy",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":214,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Email.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"classes/Login.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":303,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UserInMemoryRepository.html":{}}}],["support",{"_index":709,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":732,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":436,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["table",{"_index":630,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":629,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":381,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["template",{"_index":668,"title":{},"body":{"index.html":{}}}],["test",{"_index":698,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":701,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":700,"title":{},"body":{"index.html":{}}}],["testing",{"_index":286,"title":{},"body":{"injectables/HealthService.html":{}}}],["tests",{"_index":697,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":707,"title":{},"body":{"index.html":{}}}],["then(existinguser",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["then(newuser",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["then(result",{"_index":546,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"injectables/UserService.html":{}}}],["then(user",{"_index":534,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["this.authservice.login(login",{"_index":318,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authservice.signin(req.user",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(userdto",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(payload",{"_index":308,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.cryptoservice.checkpassword(user.password",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptoservice.hashpassword(userdto.password",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.email",{"_index":366,"title":{},"body":{"classes/Payload.html":{}}}],["this.gethash(candidatepassword",{"_index":229,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.gethash(password",{"_index":228,"title":{},"body":{"injectables/CryptoService.html":{}}}],["this.healthservice.getstatus",{"_index":277,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.id",{"_index":364,"title":{},"body":{"classes/Payload.html":{}}}],["this.jwtservice.sign(json.stringify(this.gettokenpayload(newuser",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(json.stringify(this.gettokenpayload(user",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.login",{"_index":365,"title":{},"body":{"classes/Payload.html":{}}}],["this.mapusertodto(result",{"_index":590,"title":{},"body":{"injectables/UserService.html":{}}}],["this.mapusertodto(user",{"_index":594,"title":{},"body":{"injectables/UserService.html":{}}}],["this.reflector.get('role",{"_index":406,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.repository.create(user",{"_index":589,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repository.delete(id",{"_index":601,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repository.getall",{"_index":592,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repository.getbyid(id",{"_index":591,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repository.getbylogin(login",{"_index":599,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repository.update(user",{"_index":600,"title":{},"body":{"injectables/UserService.html":{}}}],["this.requesttag",{"_index":383,"title":{},"body":{"injectables/PerformanceInterceptor.html":{}}}],["this.role",{"_index":367,"title":{},"body":{"classes/Payload.html":{}}}],["this.service.create(user",{"_index":486,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.createasync(user).topromise",{"_index":533,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["this.service.delete(id",{"_index":497,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.deleteasync(id",{"_index":539,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["this.service.getall",{"_index":484,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{}}}],["this.service.getallasync().topromise",{"_index":540,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["this.service.getasync(id).topromise",{"_index":550,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["this.service.getbyid(id",{"_index":492,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.getbyid(req.user.id",{"_index":352,"title":{},"body":{"controllers/MeController.html":{}}}],["this.service.queryasync",{"_index":541,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["this.service.update(id",{"_index":494,"title":{},"body":{"controllers/UserController.html":{}}}],["this.service.update(req.user.id",{"_index":354,"title":{},"body":{"controllers/MeController.html":{}}}],["this.service.updateasync(user).topromise",{"_index":551,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["this.userservice.create(user",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getbylogin(login",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getbylogin(payload.login",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getbylogin(userdto.login",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"injectables/UserService.html":{}}}],["token",{"_index":167,"title":{"classes/Token.html":{}},"body":{"injectables/AuthService.html":{},"classes/Token.html":{},"coverage.html":{}}}],["topromise",{"_index":545,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["touch",{"_index":719,"title":{},"body":{"index.html":{}}}],["transform",{"_index":320,"title":{},"body":{"injectables/LogPipe.html":{}}}],["transform(value",{"_index":321,"title":{},"body":{"injectables/LogPipe.html":{}}}],["transformer",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":405,"title":{},"body":{"guards/RoleGuard.html":{}}}],["twitter",{"_index":725,"title":{},"body":{"index.html":{}}}],["type",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CryptoService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/CustomMiddleware.html":{},"classes/Email.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogPipe.html":{},"classes/Login.html":{},"controllers/MeController.html":{},"classes/Payload.html":{},"injectables/PerformanceInterceptor.html":{},"guards/RoleGuard.html":{},"classes/SignUp.html":{},"classes/Token.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":740,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":683,"title":{},"body":{"index.html":{}}}],["ui",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":605,"title":{},"body":{"classes/Utils.html":{}}}],["unauthorizedexception('invalid",{"_index":609,"title":{},"body":{"classes/Utils.html":{}}}],["undefined",{"_index":549,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["unit",{"_index":696,"title":{},"body":{"index.html":{}}}],["until",{"_index":441,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{}}}],["up",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["update",{"_index":337,"title":{},"body":{"controllers/MeController.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["update(@param",{"_index":493,"title":{},"body":{"controllers/UserController.html":{}}}],["update(@req",{"_index":353,"title":{},"body":{"controllers/MeController.html":{}}}],["update(id",{"_index":462,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(req",{"_index":340,"title":{},"body":{"controllers/MeController.html":{}}}],["update(user",{"_index":520,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{}}}],["usage",{"_index":437,"title":{},"body":{"interfaces/User.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{}}}],["use",{"_index":249,"title":{},"body":{"injectables/CustomMiddleware.html":{},"modules/UserModule.html":{}}}],["use(req",{"_index":250,"title":{},"body":{"injectables/CustomMiddleware.html":{}}}],["useclass",{"_index":556,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["used",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["usefilters",{"_index":465,"title":{},"body":{"controllers/UserController.html":{}}}],["usefilters(new",{"_index":488,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard('jwt",{"_index":350,"title":{},"body":{"controllers/MeController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard('local",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(roleguard",{"_index":480,"title":{},"body":{"controllers/UserController.html":{}}}],["useinterceptors",{"_index":270,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(new",{"_index":266,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["usepipes",{"_index":271,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["usepipes(new",{"_index":275,"title":{},"body":{"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":153,"title":{"interfaces/User.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MeController.html":{},"guards/RoleGuard.html":{},"interfaces/User.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["user.controller",{"_index":558,"title":{},"body":{"modules/UserModule.html":{}}}],["user.email",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.id",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.interface",{"_index":346,"title":{},"body":{"controllers/MeController.html":{},"controllers/UserController.html":{},"injectables/UserInMemoryRepository.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["user.login",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.repository",{"_index":529,"title":{},"body":{"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.role",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"guards/RoleGuard.html":{},"injectables/UserService.html":{}}}],["user.roles",{"_index":411,"title":{},"body":{"guards/RoleGuard.html":{}}}],["user.salt",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":345,"title":{},"body":{"controllers/MeController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.interface",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/user.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["usercontroller",{"_index":444,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":88,"title":{"classes/UserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/User.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userdto.email",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdto.login",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["userinmemoryrepository",{"_index":502,"title":{"injectables/UserInMemoryRepository.html":{}},"body":{"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["usermodule",{"_index":14,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["username",{"_index":610,"title":{},"body":{"classes/Utils.html":{}}}],["usernamefield",{"_index":314,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrepository",{"_index":505,"title":{"classes/UserRepository.html":{}},"body":{"injectables/UserInMemoryRepository.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userrepository:4",{"_index":522,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["userrepository:5",{"_index":527,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["userrepository:6",{"_index":523,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["userrepository:7",{"_index":524,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["userrepository:8",{"_index":525,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["userrepository:9",{"_index":526,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["userrole",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/User.html":{},"classes/UserDto.html":{},"miscellaneous/typealiases.html":{}}}],["users",{"_index":537,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["userservice",{"_index":120,"title":{"injectables/UserService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MeController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["utils",{"_index":169,"title":{"classes/Utils.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Utils.html":{},"coverage.html":{}}}],["utils.unauthorizedexception",{"_index":309,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["valentin",{"_index":727,"title":{},"body":{"index.html":{}}}],["valentinkononov",{"_index":729,"title":{},"body":{"index.html":{}}}],["validate",{"_index":293,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(login",{"_index":312,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":296,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(payload",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":334,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{},"dependencies.html":{}}}],["value",{"_index":325,"title":{},"body":{"injectables/LogPipe.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":615,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":743,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":290,"title":{},"body":{"injectables/HealthService.html":{},"interfaces/User.html":{},"classes/UserDto.html":{}}}],["void",{"_index":254,"title":{},"body":{"injectables/CustomMiddleware.html":{}}}],["watch",{"_index":691,"title":{},"body":{"index.html":{}}}],["website",{"_index":723,"title":{},"body":{"index.html":{}}}],["winston",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["winstonmodule",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule.forroot(logconfig.winstonoptions",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["working",{"_index":288,"title":{},"body":{"injectables/HealthService.html":{}}}],["x",{"_index":542,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["x.login.tolocalelowercase",{"_index":543,"title":{},"body":{"injectables/UserInMemoryRepository.html":{}}}],["you'd",{"_index":712,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nHealthService\n\nHealthService\n\nAppModule -->\n\nHealthService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HealthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Logger, MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { HealthController } from './health.controller';\nimport { HealthService } from './health.service';\nimport { AuthModule } from './auth/auth.module';\nimport { UserModule } from './user/user.module';\n\nimport { WinstonModule } from 'nest-winston';\nimport logConfig from './log-config';\nimport { LogPipe } from './core/pipes/log.pipe';\nimport { PerformanceInterceptor } from './core/interceptors/performance.interceptor';\nimport { CustomMiddleware } from './core/middleware/custom.middleware';\n\nconst FEATURED_MODULES = [\n  AuthModule,\n  UserModule,\n];\n\n@Module({\n  imports: [\n    WinstonModule.forRoot(logConfig.winstonOptions),\n    ...FEATURED_MODULES,\n    ],\n  controllers: [HealthController],\n  providers: [\n    HealthService,\n    Logger,\n  ],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer): any {\n    consumer\n      .apply(CustomMiddleware)\n      .forRoutes('user');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(login: Login, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    login\n                                    \n                                                Login\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(userDto: SignUp)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-up')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                SignUp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Req, Res } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { Login } from './interfaces/login';\nimport { UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiUseTags } from '@nestjs/swagger';\nimport { SignUp } from './interfaces/signUp';\n\n@ApiUseTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('login')\n  @UseGuards(AuthGuard('local'))\n  public async login(@Body() login: Login, @Req() req) {\n    return await this.authService.signIn(req.user);\n  }\n\n  @Post('sign-up')\n  async signUp(@Body() userDto: SignUp) {\n    return await this.authService.signUp(userDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nAuthModule -->\n\nCryptoService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthModule -->\n\nUserService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            CryptoService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './passport/jwt.strategy';\nimport { PassportModule } from '@nestjs/passport';\nimport { UserModule } from '../user/user.module';\nimport { UserService } from '../user/user.service';\nimport { CryptoService } from './crypto.service';\nimport { AuthController } from './auth.controller';\nimport { LocalStrategy } from './passport/local.strategy';\nimport config from '../config';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      secret: config.auth.jwt.secret,\n      privateKey: config.auth.jwt.secret,\n      signOptions: {\n        // expiresIn: 180, // config.auth.jwt.ttl,\n      },\n    }),\n    UserModule,\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    JwtStrategy,\n    LocalStrategy,\n    UserService,\n    CryptoService,\n  ],\n  exports: [\n    PassportModule,\n    AuthService,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getTokenPayload\n                            \n                            \n                                    Public\n                                    Async\n                                logIn\n                            \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                            \n                                    Public\n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, cryptoService: CryptoService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getTokenPayload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokenPayload(user: User | UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User | UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Payload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            logIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(login, password)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    login\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(user)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(userDto: SignUp)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                SignUp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(payload: Payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                Payload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { JwtService } from '@nestjs/jwt';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { UserService } from '../user/user.service';\nimport { Payload } from './interfaces/payload';\nimport { User, UserDto, UserRole } from '../user/user.interface';\nimport { CryptoService } from './crypto.service';\nimport { SignUp } from './interfaces/signUp';\nimport { Token } from './interfaces/token';\nimport { Utils } from './utils';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly cryptoService: CryptoService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  private getTokenPayload(user: User | UserDto): Payload {\n    return new Payload(user.id, user.login, user.email, user.role);\n  }\n\n  public async signUp(userDto: SignUp): Promise {\n    return await this.userService.getByLogin(userDto.login)\n      .then(existingUser => {\n        if (existingUser && existingUser.id) {\n          throw new Error('User with this email already exists');\n        }\n        const password = this.cryptoService.hashPassword(userDto.password);\n        const user = {\n          email: userDto.email,\n          login: userDto.login,\n          password: password.hash,\n          salt: password.salt,\n          role: 'user' as UserRole,\n        };\n\n        return this.userService.create(user)\n          .then(newUser => {\n            // const token = this.jwtService.sign(JSON.stringify(this.getTokenPayload(newUser)));\n            const token = this.jwtService.sign(JSON.stringify(this.getTokenPayload(newUser)));\n            return { token };\n          });\n      });\n  }\n\n  public async signIn(user): Promise {\n    const token = this.jwtService.sign(JSON.stringify(this.getTokenPayload(user)));\n    return { token };\n  }\n\n  async validateUser(payload: Payload): Promise {\n    return await this.userService.getByLogin(payload.login);\n  }\n\n  // used in local auth strategy\n  public async logIn(login, password) {\n    Logger.debug('login')\n    return await this.userService.getByLogin(login)\n      .then( user => {\n        Logger.debug(user)\n        if (user && user.id) {\n          return this.cryptoService.checkPassword(user.password, user.salt, password)\n            ? Promise.resolve(user)\n            : Promise.reject(Utils.UnAuthorizedException);\n        } else {\n         return Promise.reject(Utils.UnAuthorizedException);\n        }\n      })\n      .catch(err => Promise.reject(err));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoService.html":{"url":"injectables/CryptoService.html","title":"injectable - CryptoService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CryptoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/crypto.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                checkPassword\n                            \n                            \n                                    Private\n                                getHash\n                            \n                            \n                                    Public\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            checkPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkPassword(originalHash: string, salt: string, candidatePassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/crypto.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    originalHash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    candidatePassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getHash\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHash(password: string, salt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/crypto.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/crypto.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { salt: any; hash: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { pbkdf2Sync, randomBytes } from 'crypto';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class CryptoService {\n  public hashPassword(password: string) {\n    const salt = randomBytes(32).toString('hex');\n    const hash = this.getHash(password, salt);\n    return { salt, hash };\n  }\n\n  public checkPassword(originalHash: string, salt: string, candidatePassword: string) {\n    const hash = this.getHash(candidatePassword, salt);\n    return (hash === originalHash);\n  }\n\n  private getHash(password: string, salt: string) {\n    return pbkdf2Sync(password, salt, 1024, 32, 'sha512').toString('hex');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomExceptionFilter.html":{"url":"classes/CustomExceptionFilter.html","title":"class - CustomExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom-exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/custom-exception.filter.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter, HttpException, Logger } from '@nestjs/common';\n\n@Catch(HttpException)\nexport class CustomExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost): any {\n    Logger.debug('Exception');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomMiddleware.html":{"url":"injectables/CustomMiddleware.html","title":"injectable - CustomMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CustomMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middleware/custom.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            use\n                        \n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middleware/custom.middleware.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from '@nestjs/common';\n\n@Injectable()\nexport class CustomMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: () => void) {\n    Logger.debug('Middleware');\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Email.html":{"url":"classes/Email.html","title":"class - Email","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Email\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/email.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/interfaces/email.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\nexport class Email {\n  @ApiModelProperty()\n  email: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(new PerformanceInterceptor())@UsePipes(new LogPipe())@Get('status')\n                \n            \n\n            \n                \n                    Defined in src/health.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseInterceptors, UsePipes } from '@nestjs/common';\nimport { HealthService } from './health.service';\nimport { ApiUseTags } from '@nestjs/swagger';\nimport { LogPipe } from './core/pipes/log.pipe';\nimport { PerformanceInterceptor } from './core/interceptors/performance.interceptor';\n\n@ApiUseTags('health')\n@Controller('health')\nexport class HealthController {\n  constructor(private readonly healthService: HealthService) {}\n\n  @UseInterceptors(new PerformanceInterceptor('status'))\n  @UsePipes(new LogPipe())\n  @Get('status')\n  getHello(): string {\n    return this.healthService.getStatus();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HealthService.html":{"url":"injectables/HealthService.html","title":"injectable - HealthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  HealthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStatus\n                        \n                        \n                    \n                \n            \n            \n                \ngetStatus()\n                \n            \n\n\n            \n                \n                    Defined in src/health.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport config from './config';\n\n/*\n * Health Service class, provides basic API status for testing purposes\n */\n@Injectable()\nexport class HealthService {\n  getStatus(): string {\n    return `API is working fine ! Version: ${config.api.version}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: Payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/jwt.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                Payload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { AuthService } from '../auth.service';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { Payload } from '../interfaces/payload';\nimport { Utils } from '../utils';\nimport config from '../../config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.auth.jwt.secret,\n    });\n  }\n\n  async validate(payload: Payload) {\n    Logger.debug('Validate User')\n    const user = await this.authService.validateUser(payload);\n    if (!user) {\n      throw Utils.UnAuthorizedException;\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(login, password)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/local.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    login\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { AuthService } from '../auth.service';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { Utils } from '../utils';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({\n      usernameField: 'login',\n      passwordField: 'password',\n      passReqToCallback: false,\n    });\n  }\n\n  async validate(login, password) {\n    Logger.debug('Login ' + login);\n    const user = await this.authService.logIn(login, password);\n    if (!user) {\n      throw Utils.UnAuthorizedException;\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogPipe.html":{"url":"injectables/LogPipe.html","title":"injectable - LogPipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LogPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/log.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/log.pipe.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ArgumentMetadata, HttpException, Injectable, Logger, PipeTransform } from '@nestjs/common';\n\n@Injectable()\nexport class LogPipe implements PipeTransform {\n  transform(value: any, metadata: ArgumentMetadata) {\n    Logger.debug('Pipe');\n    // throw new HttpException('', 500);\n    return value;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Login.html":{"url":"classes/Login.html","title":"class - Login","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Login\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/login.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/interfaces/login.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/interfaces/login.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\n\nexport class Login {\n  @IsNotEmpty()\n  @ApiModelProperty()\n  login: string;\n\n  @IsNotEmpty()\n  @ApiModelProperty()\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MeController.html":{"url":"controllers/MeController.html","title":"controller - MeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/me.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                me\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/user/me.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(req, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()\n                \n            \n\n            \n                \n                    Defined in src/user/me.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Put, Delete, Body, Param, Req } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { User } from './user.interface';\nimport { UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiUseTags, ApiBearerAuth } from '@nestjs/swagger';\n\n@ApiBearerAuth()\n@ApiUseTags('me')\n@Controller('me')\n@UseGuards(AuthGuard('jwt'))\nexport class MeController {\n  constructor(private readonly service: UserService) {}\n\n  @Get()\n  async get(@Req() req) {\n    return await this.service.getById(req.user.id);\n  }\n\n  @Put()\n  async update(@Req() req, @Body() user: User) {\n    return await this.service.update(req.user.id, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Payload.html":{"url":"classes/Payload.html","title":"class - Payload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Payload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/payload.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                login\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: number, login: string, email: string, role: string)\n                    \n                \n                        \n                            \n                                Defined in src/auth/interfaces/payload.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        login\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        email\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        role\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/interfaces/payload.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/interfaces/payload.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/interfaces/payload.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/interfaces/payload.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\nexport class Payload {\n\n  constructor(id: number, login: string, email: string, role: string) {\n    this.id = id;\n    this.login = login;\n    this.email = email;\n    this.role = role;\n  }\n\n  @ApiModelProperty()\n  id: number;\n\n  @ApiModelProperty()\n  login: string;\n\n  @ApiModelProperty()\n  email: string;\n\n  @ApiModelProperty()\n  role: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PerformanceInterceptor.html":{"url":"injectables/PerformanceInterceptor.html","title":"injectable - PerformanceInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PerformanceInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/performance.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                requestTag\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(requestTag: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/interceptors/performance.interceptor.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        requestTag\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/performance.interceptor.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            requestTag\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/interceptors/performance.interceptor.ts:8\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, NestInterceptor, ExecutionContext, CallHandler, Logger } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class PerformanceInterceptor implements NestInterceptor {\n\n  private readonly requestTag: string;\n\n  constructor(requestTag: string) {\n    this.requestTag = requestTag;\n  }\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    Logger.debug('Interceptor started')\n    const now = Date.now();\n    return next\n      .handle()\n      .pipe(\n        tap(() => {\n          Logger.debug('Interceptor completed')\n          Logger.log(`${this.requestTag} completed in: ${Date.now() - now}ms`)\n        }),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/core/guards/role.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/guards/role.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/core/guards/role.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, Logger } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean | Promise | Observable {\n    Logger.debug('Guard')\n    return true;\n    const role = this.reflector.get('role', context.getHandler());\n    if (!role) {\n      return true;\n    }\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    const hasRole = () => user.role === role;\n    return user && user.roles && hasRole();\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUp.html":{"url":"classes/SignUp.html","title":"class - SignUp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/signUp.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Login\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmPassword\n                            \n                            \n                                email\n                            \n                            \n                                login\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            confirmPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/interfaces/signUp.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()@ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/interfaces/signUp.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiModelProperty()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Login\n\n                                \n                            \n                        \n                            \n                                    Defined in         Login:7\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiModelProperty()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         Login\n\n                                \n                            \n                        \n                            \n                                    Defined in         Login:11\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\nimport { Login } from './login';\nimport { IsEmail, IsNotEmpty } from 'class-validator';\n\nexport class SignUp extends Login {\n  @IsEmail()\n  @ApiModelProperty()\n  email: string;\n\n  @IsNotEmpty()\n  @ApiModelProperty()\n  confirmPassword: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Token.html":{"url":"classes/Token.html","title":"class - Token","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Token\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/token.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/interfaces/token.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\nexport class Token {\n  @ApiModelProperty()\n  token: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    InMemoryDBEntity\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        login\n                                \n                                \n                                            Optional\n                                        password\n                                \n                                \n                                        role\n                                \n                                \n                                            Optional\n                                        salt\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                    \n                                \n                                \n                                    \n                                        login:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                    \n                                \n                                \n                                    \n                                        role:         UserRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserRole\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        salt\n                                    \n                                \n                                \n                                    \n                                        salt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\nimport { InMemoryDBEntity } from '@nestjs-addons/in-memory-db';\n\n/*\n * User role can be 'admin' or 'user'\n */\nexport type UserRole = 'admin' | 'user';\n\n/*\n * Base User entity, stored in InMemoryDB\n */\nexport interface User extends InMemoryDBEntity {\n  password?: string;\n  salt?: string;\n  login: string;\n  email: string;\n  role: UserRole;\n}\n\n/*\n * User class for Swagger usage - duplicates features of User interface\n * Need until new version of nest/swagger is released\n */\nexport class UserDto {\n  id: number;\n\n  @ApiModelProperty()\n  login: string;\n\n  @ApiModelProperty()\n  email: string;\n\n  @ApiModelProperty()\n  role: UserRole;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                list\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UsePipes(new LogPipe())@UseGuards(RoleGuard)@UseInterceptors(new PerformanceInterceptor())@UseFilters(new CustomExceptionFilter())@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            list\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    list()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role('admin')@UseGuards(RoleGuard)@Get('list')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Put, Delete, Body, Param, Req, Logger, UsePipes, UseInterceptors, UseFilters } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { User } from './user.interface';\nimport { UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiUseTags, ApiBearerAuth } from '@nestjs/swagger';\nimport { Role } from '../core/guards/role.decorator';\nimport { RoleGuard } from '../core/guards/role.guard';\nimport { LogPipe } from '../core/pipes/log.pipe';\nimport { PerformanceInterceptor } from '../core/interceptors/performance.interceptor';\nimport { CustomExceptionFilter } from '../core/filters/custom-exception.filter';\n\n@ApiBearerAuth()\n@ApiUseTags('user')\n@Controller('user')\n@UseGuards(AuthGuard('jwt'))\nexport class UserController {\n  constructor(private readonly service: UserService) {}\n\n  // Order of controller methods matters, if 'list' will be the last, it will never be hit because rule is overwritten by :id\n\n  @Role('admin')\n  @UseGuards(RoleGuard)\n  @Get('list')\n  async list() {\n    Logger.debug('List called');\n    return await this.service.getAll();\n  }\n\n  @Post()\n  async create(@Body() user: User) {\n    return await this.service.create(user);\n  }\n\n  @UsePipes(new LogPipe())\n  @UseGuards(RoleGuard)\n  @UseInterceptors(new PerformanceInterceptor('getById'))\n  @UseFilters(new CustomExceptionFilter())\n  @Get(':id')\n  async getById(@Param() id: number) {\n    Logger.debug('getById called');\n    return await this.service.getById(id);\n  }\n\n  @Put(':id')\n  async update(@Param() id: number, @Body() user: User) {\n    return await this.service.update(id, user);\n  }\n\n  @Role('admin')\n  // @UseGuards(RoleGuard)\n  @Delete(':id')\n  async deleteById(@Param() id: number) {\n    return await this.service.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.interface.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                login\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.interface.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.interface.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            login\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.interface.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UserRole\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.interface.ts:34\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\nimport { InMemoryDBEntity } from '@nestjs-addons/in-memory-db';\n\n/*\n * User role can be 'admin' or 'user'\n */\nexport type UserRole = 'admin' | 'user';\n\n/*\n * Base User entity, stored in InMemoryDB\n */\nexport interface User extends InMemoryDBEntity {\n  password?: string;\n  salt?: string;\n  login: string;\n  email: string;\n  role: UserRole;\n}\n\n/*\n * User class for Swagger usage - duplicates features of User interface\n * Need until new version of nest/swagger is released\n */\nexport class UserDto {\n  id: number;\n\n  @ApiModelProperty()\n  login: string;\n\n  @ApiModelProperty()\n  email: string;\n\n  @ApiModelProperty()\n  role: UserRole;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserInMemoryRepository.html":{"url":"injectables/UserInMemoryRepository.html","title":"injectable - UserInMemoryRepository","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserInMemoryRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-inmemory.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                        UserRepository\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getByLogin\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Abstract\n                                    Async\n                                create\n                            \n                            \n                                    Abstract\n                                    Async\n                                delete\n                            \n                            \n                                    Abstract\n                                    Async\n                                getAll\n                            \n                            \n                                    Abstract\n                                    Async\n                                getById\n                            \n                            \n                                    Abstract\n                                    Async\n                                getByLogin\n                            \n                            \n                                    Abstract\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(service: InMemoryDBService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-inmemory.repository.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        InMemoryDBService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-inmemory.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-inmemory.repository.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-inmemory.repository.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-inmemory.repository.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getByLogin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByLogin(login: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-inmemory.repository.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    login\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-inmemory.repository.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         UserRepository\n\n                \n            \n            \n                \n                        Defined in         UserRepository:4\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: number)\n                \n            \n\n\n            \n                \n                    Inherited from         UserRepository\n\n                \n            \n            \n                \n                        Defined in         UserRepository:6\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            Async\n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Inherited from         UserRepository\n\n                \n            \n            \n                \n                        Defined in         UserRepository:7\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            Async\n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Inherited from         UserRepository\n\n                \n            \n            \n                \n                        Defined in         UserRepository:8\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            Async\n                            getByLogin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByLogin(login: string)\n                \n            \n\n\n            \n                \n                    Inherited from         UserRepository\n\n                \n            \n            \n                \n                        Defined in         UserRepository:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    login\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(user: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         UserRepository\n\n                \n            \n            \n                \n                        Defined in         UserRepository:5\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, Scope } from '@nestjs/common';\nimport { UserRepository } from './user.repository';\nimport { User } from './user.interface';\nimport { InMemoryDBService } from '@nestjs-addons/in-memory-db';\n\n@Injectable({\n  scope: Scope.DEFAULT,\n})\nexport class UserInMemoryRepository extends UserRepository {\n  constructor(private readonly service: InMemoryDBService) {\n    super();\n    Logger.debug('UserInMemoryRepository initialized');\n  }\n\n  async create(user: Partial): Promise {\n    return this.service.createAsync(user).toPromise()\n      .then(user => {\n        Logger.debug('user created');\n        const users = this.service.getAll();\n        Logger.debug(users);\n        return user;\n      });\n  }\n\n  async delete(id: number): Promise {\n    await this.service.deleteAsync(id);\n  }\n\n  async getAll(): Promise {\n    return this.service.getAllAsync().toPromise();\n  }\n\n  async getByLogin(login: string): Promise {\n    return this.service.queryAsync(\n      x => x.login.toLocaleLowerCase() === login.toLocaleLowerCase())\n      .toPromise()\n      .then(result => result && result.length ? result[0] : undefined);\n  }\n\n  async getById(id: number): Promise {\n    return this.service.getAsync(id).toPromise();\n  }\n\n  async update(user: User): Promise {\n    return this.service.updateAsync(user).toPromise();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\n{ provide: UserRepository, useClass: UserInMemoryRepository } \n\n{ provide: UserRepository, useClass: UserInMemoryRepository } \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n{ provide: UserRepository, useClass: UserInMemoryRepository }  -->\n\nUserModule->{ provide: UserRepository, useClass: UserInMemoryRepository } \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            MeController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                        \n                            { provide: UserRepository, useClass: UserInMemoryRepository }\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { UserInMemoryRepository } from './user-inmemory.repository';\nimport { UserRepository } from './user.repository';\nimport { MeController } from './me.controller';\nimport { InMemoryDBModule } from '@nestjs-addons/in-memory-db';\n\n@Module({\n  imports: [\n    InMemoryDBModule.forRoot(),\n  ],\n  controllers: [\n    UserController,\n    MeController,\n  ],\n  providers: [\n    UserService,\n    // use particular implementation of repository interface\n    { provide: UserRepository, useClass: UserInMemoryRepository },\n  ],\n  exports: [\n    UserService,\n    // needs to enable correct usage of UserService outside of UserModule\n    { provide: UserRepository, useClass: UserInMemoryRepository },\n  ],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                    Async\n                                create\n                            \n                            \n                                    Abstract\n                                    Async\n                                delete\n                            \n                            \n                                    Abstract\n                                    Async\n                                getAll\n                            \n                            \n                                    Abstract\n                                    Async\n                                getById\n                            \n                            \n                                    Abstract\n                                    Async\n                                getByLogin\n                            \n                            \n                                    Abstract\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            Async\n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            Async\n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            Async\n                            getByLogin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByLogin(login: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    login\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Abstract\n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { User } from './user.interface';\n\nexport abstract class UserRepository {\n  abstract async create(user: Partial): Promise;\n  abstract async update(user: Partial): Promise;\n  abstract async delete(id: number): Promise;\n  abstract async getAll(): Promise;\n  abstract async getById(id: number): Promise;\n  abstract async getByLogin(login: string): Promise;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                getAll\n                            \n                            \n                                    Public\n                                    Async\n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                getByLogin\n                            \n                            \n                                    Private\n                                mapUserToDto\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getByLogin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getByLogin(login: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    login\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            mapUserToDto\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mapUserToDto(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         UserDto\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, Injectable, Logger } from '@nestjs/common';\nimport { User, UserDto } from './user.interface';\nimport { UserRepository } from './user.repository';\n\n@Injectable()\nexport class UserService {\n\n  constructor(private readonly repository: UserRepository) {}\n\n  public async create(user: Partial): Promise {\n    return this.repository.create(user)\n      .then(result => this.mapUserToDto(result));\n  }\n\n  public async getById(id: number): Promise {\n    return this.repository.getById(id)\n      .then(result => this.mapUserToDto(result));\n  }\n\n  public async getAll(): Promise {\n    return  this.repository.getAll()\n      .then(result => result && result.length\n        ? result.map(user => this.mapUserToDto(user))\n        : []);\n  }\n\n  // used for internal API purposes, returns straight User object from Data Source\n  public async getByLogin(login: string): Promise {\n    return this.repository.getByLogin(login);\n  }\n\n  public async update(id: number, user: User): Promise {\n    user.id = id;\n    return this.repository.update(user)\n      .then(() => this.mapUserToDto(user));\n  }\n\n  public async delete(id: number): Promise {\n    await this.repository.delete(id);\n  }\n\n  private mapUserToDto(user: User): UserDto {\n    if (!user) {\n      throw new HttpException('User not created', 500);\n    }\n    return {\n      id: user.id,\n      login: user.login,\n      email: user.email,\n      role: user.role,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Utils.html":{"url":"classes/Utils.html","title":"class - Utils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Utils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/utils.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    UnAuthorizedException\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        UnAuthorizedException\n                    \n                \n\n                \n                    \n                        getUnAuthorizedException()\n                    \n                \n                            \n                                \n                                    Defined in src/auth/utils.ts:4\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { UnauthorizedException } from '@nestjs/common';\n\nexport class Utils {\n  public static get UnAuthorizedException() {\n    return new UnauthorizedException('Invalid username or password');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            FEATURED_MODULES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/crypto.service.ts\n            \n            injectable\n            CryptoService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/interfaces/email.ts\n            \n            class\n            Email\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/interfaces/login.ts\n            \n            class\n            Login\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/interfaces/payload.ts\n            \n            class\n            Payload\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/interfaces/signUp.ts\n            \n            class\n            SignUp\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/interfaces/token.ts\n            \n            class\n            Token\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/passport/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/passport/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/utils.ts\n            \n            class\n            Utils\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/filters/custom-exception.filter.ts\n            \n            class\n            CustomExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/guards/role.decorator.ts\n            \n            variable\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/guards/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/interceptors/performance.interceptor.ts\n            \n            injectable\n            PerformanceInterceptor\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/middleware/custom.middleware.ts\n            \n            injectable\n            CustomMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/log.pipe.ts\n            \n            injectable\n            LogPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/health.service.ts\n            \n            injectable\n            HealthService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            initSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/me.controller.ts\n            \n            controller\n            MeController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user-inmemory.repository.ts\n            \n            injectable\n            UserInMemoryRepository\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.interface.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.interface.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-addons/in-memory-db : ^1.8.3\n        \n            @nestjs/common : ^6.7.2\n        \n            @nestjs/core : ^6.7.2\n        \n            @nestjs/jwt : ^6.0.0\n        \n            @nestjs/passport : ^6.1.0\n        \n            @nestjs/platform-express : ^6.7.2\n        \n            @nestjs/swagger : ^3.1.0\n        \n            app-root-path : ^3.0.0\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.11.0\n        \n            compression : ^1.7.4\n        \n            dotenv : ^8.2.0\n        \n            nest-winston : ^1.1.4\n        \n            passport : ^0.4.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.0\n        \n            rxjs : ^6.5.3\n        \n            swagger-ui-express : ^4.1.2\n        \n            winston : ^3.2.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            initSwagger   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            initSwagger\n                        \n                        \n                    \n                \n            \n            \n                \ninitSwagger(app)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nNester - backend API template based on\n\n\n  \n\n\nA progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n\n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nFramework Author - Kamil Myśliwiec\n\nFramework Website - https://nestjs.com\n\nTwitter - @nestframework\n\nTemplate Author - Valentin Kononov\n\nTwitter - @ValentinKononov\n\n\nLicense\n  Nest is MIT licensed\n  Nester Template is MIT licensed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\n{ provide: UserRepository, useClass: UserInMemoryRepository } \n\n{ provide: UserRepository, useClass: UserInMemoryRepository } \n\n{ provide: UserRepository, useClass: UserInMemoryRepository }  -->\n\nUserModule->{ provide: UserRepository, useClass: UserInMemoryRepository } \n\n\n\n\n\nHealthService\n\nHealthService\n\nAppModule -->\n\nHealthService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nAuthModule -->\n\nCryptoService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthModule -->\n\nUserService->AuthModule\n\n\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserRole   (src/.../user.interface.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/user.interface.ts\n    \n    \n        \n            \n                \n                    \n                    UserRole\n                \n            \n            \n                \n                        \"admin\" | \"user\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            FEATURED_MODULES   (src/.../app.module.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            Role   (src/.../role.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FEATURED_MODULES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  AuthModule,\n  UserModule,\n]\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            module\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n\n            \n        \n\n    src/core/guards/role.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Role\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (role: string) => SetMetadata('role', role)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
